install.packages("swirl")
udacious <- c("Chris Saden", "Lauren Castellano",               "Sarah Spikes", "Dean Eckles",               "Andy Brown", "Moira Burke",               "Kunal Chawla")
udacious <- c("Chris Saden", "Lauren Castellano",               "Sarah Spikes", "Dean Eckles",               "Andy Brown", "Moira Burke",               "Kunal Chawla")
udacious <- c("Chris Saden", "Lauren Castellano",               "Sarah Spikes", "Dean Eckles",               "Andy Brown", "Moira Burke",               "Kunal Chawla")
rtvs::debug_source("~/GitHub/DataExploration_R/DataExploration_R/demystifying.R")
udacious <- c("Chris Saden", "Lauren Castellano",               "Sarah Spikes", "Dean Eckles",               "Andy Brown", "Moira Burke",               "Kunal Chawla")
install.packages("swirl", lib="C:/Program Files/Microsoft/R Client/R_SERVER/library")
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
z, 555, z
z 555 z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
swirl()
gwtwd()
getwd()
ls()
x <- 9
ls()
dir()
?dir
args(dir())
ars(list.files)
args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create('testdir')
setwd('testdir')
file.create('mytest.R')
dir()
file.exists()
file.exists('mytest.R')
file.info()
file.info('mytest.R')
file.rename('mytest.R', 'mytest2.R')
file.copy('mytest2.R')
file.copy('mytest2.R', 'mytest3.R')
file.path('mytest3.R')
file.path(folder1, folder2)
file.path(folder1)
?help
help
info()
skip()
?dir.create
dir.create('testdir2')
bye()
getwd()
esc
setwd("C:/Users/dooki/Documents/GitHub/DataExploration_R/DataExploration_R")
getwd()
vgdata <- read.csv('vgsales.csv')
subset(vgdata, Genre == 'Puzzle')
rtvs::debug_source("~/GitHub/DataExploration_R/DataExploration_R/demystifying.R")
summary(mtcars)
subset(mtcars, mpg > 30 & hp > 100)
subset(mtcars, mpg >= 30 & hp < 60)
subset(cars, mpg >= 30 & hp < 60)
subset(cars, mpg >= 30 & hp < 60)
numbers <- c(1:10) numbers numbers <- c(numbers, 11:20) numbers
udacious <- c("Chris Saden", "Lauren Castellano",               "Sarah Spikes", "Dean Eckles",               "Andy Brown", "Moira Burke",               "Kunal Chawla", 'Whitney King')
mystery == 11
mystery = nchar(udacious) mystery
data(mtcars)
names(mtcars)
? mtcars
mtcars
str(mtcars) dim(mtcars)
install.packages('ggplot2', dependencies = T)
vgdata <- read.csv('vgsales.csv') names(vgdata)
install.packages('ggplot2')
rtvs::debug_source("~/GitHub/DataExploration_R/DataExploration_R/demystifying.R")
library(ggplot2)
qplot(x = Year, data = vgdata)
install.packages('ggthemes', dependencies = TRUE) library(ggthemes)
qplot(x = Year, data = vgdata) +  theme_set(theme_minimal(24))
qplot(x = Year, data = vgdata) theme_set(theme_minimal(24))
qplot(x = Year, data = vgdata) theme_set(theme_minimal(12))
qplot(x = Year, data = vgdata) theme_set(theme_minimal(12))
qplot(x = Year, data = vgdata) theme_set(theme_minimal(10))
qplot(x = Year, data = vgdata) theme_set(theme_minimal(10))
qplot(x = Year, data = vgdata) theme_set(theme_minimal(10)) geom_histogram(binwidth = 5)
qplot(x = Year, data = vgdata + geom_histogram(binwidth = 5) + theme_set(theme_minimal(10))
qplot(x = Year, data = vgdata + geom_histogram(binwidth = 5) + theme_set(theme_minimal(10))
qplot(x = Year, data = vgdata + theme_set(theme_minimal(10))
rtvs::debug_source("~/GitHub/DataExploration_R/DataExploration_R/demystifying.R")
rtvs::debug_source("~/GitHub/DataExploration_R/DataExploration_R/demystifying.R")
qplot(x = Year, data = vgdata) theme_set(theme_minimal(10)) geom_histogram(binwidth = 5)
qplot(x = Year, data = vgdata) + theme_set(theme_minimal(10))
#qplot(x = Year, data = vgdata) + ggplot(aes(x = Year), data = vgdata) + geom_histogram(binwidth = 5) + theme_set(theme_minimal(10))
rtvs::debug_source("~/GitHub/DataExploration_R/DataExploration_R/demystifying.R")
ggplot(aes(x = Year), data = vgdata) + geom_histogram(binwidth = 5) + theme_set(theme_minimal(10))
ggplot(aes(x = Year), data = vgdata) + geom_bar(binwidth = 5) + theme_set(theme_minimal(10))
ggplot(aes(x = Year), data = vgdata) + geom_histogram(bins = 10) + theme_set(theme_minimal(10))
ggplot(aes(x = Year), data = vgdata) + geom_bar(bins = 10) + theme_set(theme_minimal(10))
ggplot(aes(x = Year), data = vgdata) + geom_histogram(bins = 5, stat = 'count') + theme_set(theme_minimal(10))
ggplot(aes(x = Year, stat = 'count'), data = vgdata) + geom_histogram(bins = 5) + theme_set(theme_minimal(10))
ggplot(aes(x = Year), data = vgdata, stat = 'count') + geom_histogram(bins = 5) + theme_set(theme_minimal(10))
ggplot(aes(x = Year), data = vgdata) + geom_histogram(bins = 5, stat = 'count') + theme_set(theme_minimal(10))
ggplot(aes(x = Year), data = vgdata) + geom_histogram(stat = 'count') + theme_set(theme_minimal(10))
ggplot(aes(x = Year), data = vgdata) + geom_histogram(stat = 'count') + theme_set(theme_minimal(10))
ggplot(aes(x = Year), data = vgdata) + geom_histogram(stat = 'count') + theme_set(theme_minimal(10))
ggplot(aes(x = Year), data = vgdata) + geom_histogram() + theme_set(theme_minimal(10))
ggplot(aes(x = Year), data = vgdata) + geom_bar() + theme_set(theme_minimal(10))
ggplot(aes(x = Year), data = vgdata) + geom_bar(stat = 'identity') + theme_set(theme_minimal(10))
ggplot(aes(x = Year), data = vgdata) + geom_bar(stat = 'count') + theme_set(theme_minimal(10))
ggplot(aes(x = Year), data = vgdata) + geom_bar(stat = 'count') + theme_set(theme_minimal(10))
qplot(x = Year, data = vgdata) + theme_set(theme_minimal(10))
qplot(x = Year, data = vgdata, geom = 'histogram' ) + theme_set(theme_minimal(10))
qplot(x = Year, data = vgdata, geom = 'histogram', stat = 'count' ) + theme_set(theme_minimal(10))
ggplot(vgdata, aes(Year)) + geom_histogram(stat = 'bin')
ggplot(vgdata, aes(Year)) + geom_histogram(stat = 'count')
dYear <- as.numeric(as.character(vgdata$Year)) ggplot(vgdata, aes(dYear)) + geom_histogram(binwidth = 2,                aes(fill = ..count..),                col = 'darkgreen',                alpha = .6) + theme_set(theme_minimal(10)) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(title = 'Histogram: Video Games Released by Year',      subtitle = 'Worldwide Sales',      x = 'Year',      y = '# Video Games Released') + scale_fill_gradient("Count", low = "red", high = "green") + scale_x_continuous(breaks = seq(1980, 2020, by = 2))
dYear <- as.numeric(as.character(vgdata$Year)) #convert string to continuous variable ggplot(vgdata, aes(dYear)) + geom_histogram(binwidth = 2,                aes(fill = ..count..),                col = 'darkgreen',                alpha = .6) + theme_set(theme_minimal(10)) + theme(axis.text.x = element_text(angle = 90, hjust = 1),       aspect.ratio = 1) + labs(title = 'Histogram: Video Games Released by Year',      subtitle = 'Worldwide Sales',      x = 'Year',      y = '# Video Games Released') + scale_fill_gradient("Count", low = "red", high = "green") + scale_x_continuous(breaks = seq(1980, 2020, by = 2))
dYear <- as.numeric(as.character(vgdata$Year)) #convert string to continuous variable ggplot(vgdata, aes(dYear)) + geom_histogram(binwidth = 2,                aes(fill = ..count..),                col = 'darkgreen',                alpha = .6) + theme_set(theme_minimal(10)) + theme(axis.text.x = element_text(angle = 90, hjust = 1),       aspect.ratio = 1) + labs(title = 'Histogram: Video Games Released by Year',      subtitle = 'Worldwide Sales',      x = 'Year',      y = '# Video Games Released') + scale_fill_gradient("Count", low = "red", high = "green") + scale_x_continuous(breaks = seq(1980, 2020, by = 2))
install pandoc
dYear <- as.numeric(as.character(vgdata$Year)) #convert string to continuous variable ggplot(vgdata, aes(dYear)) + geom_histogram(binwidth = 2,                aes(fill = ..count..),                col = 'darkgreen',                alpha = .6) + theme_set(theme_minimal(10)) + theme(axis.text.x = element_text(angle = 90, hjust = 1),       aspect.ratio = 1) + labs(title = 'Histogram: Video Games Released by Year',      subtitle = 'Worldwide Sales',      x = 'Year',      y = '# Video Games Released') + scale_fill_gradient("Count", low = "red", high = "green") + scale_x_continuous(breaks = seq(1980, 2020, by = 2))
dYear <- as.numeric(as.character(vgdata$Year)) #convert string to continuous variable ggplot(vgdata, aes(dYear)) + geom_histogram(binwidth = 2,                aes(fill = ..count..),                col = 'darkgreen',                alpha = .6) + theme_set(theme_minimal(10)) + theme(axis.text.x = element_text(angle = 90, hjust = 1),       aspect.ratio = 1) + labs(title = 'Histogram: Video Games Released by Year',      subtitle = 'Worldwide Sales',      x = 'Year',      y = '# Video Games Released') + scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") + scale_x_continuous(breaks = seq(1980, 2020, by = 2))
dYear <- as.numeric(as.character(vgdata$Year)) #convert string to continuous variable ggplot(vgdata, aes(dYear)) + geom_histogram(binwidth = 2,                aes(fill = ..count..),                col = 'darkgreen',                alpha = .7) + theme_set(theme_minimal(10)) + theme(axis.text.x = element_text(angle = 90, hjust = 1),       aspect.ratio = 1) + labs(title = 'Histogram: Video Games Released by Year',      subtitle = 'Worldwide Sales',      x = 'Year',      y = '# Video Games Released') + scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") + scale_x_continuous(breaks = seq(1980, 2020, by = 2))
dYear <- as.numeric(as.character(vgdata$Year)) #convert string to continuous variable ggplot(vgdata, aes(dYear)) + geom_histogram(binwidth = 2,                aes(fill = ..count..),                col = 'darkgreen',                alpha = .8) + theme_set(theme_minimal(10)) + theme(axis.text.x = element_text(angle = 90, hjust = 1),       aspect.ratio = 1) + labs(title = 'Histogram: Video Games Released by Year',      subtitle = 'Worldwide Sales',      x = 'Year',      y = '# Video Games Released') + scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") + scale_x_continuous(breaks = seq(1980, 2020, by = 2))
dYear <- as.numeric(as.character(vgdata$Year)) #convert string to continuous variable ggplot(vgdata, aes(dYear)) + geom_histogram(binwidth = 1,                aes(fill = ..count..),                col = 'darkgreen',                alpha = .8) + theme_set(theme_minimal(10)) + theme(axis.text.x = element_text(angle = 90, hjust = 1),       aspect.ratio = 1) + labs(title = 'Histogram: Video Games Released by Year',      subtitle = 'Worldwide Sales',      x = 'Year',      y = '# Video Games Released') + scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") + scale_x_continuous(breaks = seq(1980, 2020, by = 2))
dYear <- as.numeric(as.character(vgdata$Year)) #convert string to continuous variable ggplot(vgdata, aes(dYear)) + geom_histogram(binwidth = 1,                aes(fill = ..count..),                col = 'darkgreen',                alpha = .8) + theme_set(theme_classic(10)) + theme(axis.text.x = element_text(angle = 90, hjust = 1),       aspect.ratio = 1) + labs(title = 'Histogram: Video Games Released by Year',      subtitle = 'Worldwide Sales',      x = 'Year',      y = '# Video Games Released') + scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") + scale_x_continuous(breaks = seq(1980, 2020, by = 2))
dYear <- as.numeric(as.character(vgdata$Year)) #convert string to continuous variable ggplot(vgdata, aes(dYear)) + geom_histogram(binwidth = 1,                aes(fill = ..count..),                col = 'darkgreen',                alpha = .8) + theme_set(theme_classic(10)) + theme(axis.text.x = element_text(angle = 90, hjust = 1),       aspect.ratio = 1) + labs(title = 'Histogram: Video Games Released by Year',      subtitle = 'Worldwide Sales (Not Including N/A)',      x = 'Year',      y = '# Video Games Released') + scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") + scale_x_continuous(breaks = seq(1980, 2020, by = 2))
dYear <- as.numeric(as.character(vgdata$Year)) #convert string to continuous variable ggplot(vgdata, aes(dYear)) + geom_histogram(binwidth = 1,                aes(fill = ..count..),                col = 'darkgreen',                alpha = .8) + stat_density(geom = 'line',              col = "#FF5733") + theme_set(theme_classic(10)) + theme(axis.text.x = element_text(angle = 90, hjust = 1),       aspect.ratio = 1) + labs(title = 'Histogram: Video Games Released by Year',      subtitle = 'Worldwide Sales (Not Including N/A)',      x = 'Year',      y = '# Video Games Released') + scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") + scale_x_continuous(breaks = seq(1980, 2020, by = 2))
dYear <- as.numeric(as.character(vgdata$Year)) #convert string to continuous variable ggplot(vgdata, aes(dYear)) + geom_histogram(binwidth = 1,                aes(fill = ..count..),                col = 'darkgreen',                alpha = .8) + stat_density(col = "#FF5733") + theme_set(theme_classic(10)) + theme(axis.text.x = element_text(angle = 90, hjust = 1),       aspect.ratio = 1) + labs(title = 'Histogram: Video Games Released by Year',      subtitle = 'Worldwide Sales (Not Including N/A)',      x = 'Year',      y = '# Video Games Released') + scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") + scale_x_continuous(breaks = seq(1980, 2020, by = 2))
dYear <- as.numeric(as.character(vgdata$Year)) #convert string to continuous variable ggplot(vgdata, aes(dYear)) + geom_histogram(binwidth = 1,                aes(fill = ..count..),                col = 'darkgreen',                alpha = .8) + geom_density(col = "#FF5733") + theme_set(theme_classic(10)) + theme(axis.text.x = element_text(angle = 90, hjust = 1),       aspect.ratio = 1) + labs(title = 'Histogram: Video Games Released by Year',      subtitle = 'Worldwide Sales (Not Including N/A)',      x = 'Year',      y = '# Video Games Released') + scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") + scale_x_continuous(breaks = seq(1980, 2020, by = 2))
dYear <- as.numeric(as.character(vgdata$Year)) #convert string to continuous variable ggplot(vgdata, aes(dYear)) + geom_histogram(binwidth = 1,                aes(fill = ..count..),                col = 'darkgreen',                alpha = .8) + geom_density(col = "#FF5733") + theme_set(theme_classic(10)) + theme(axis.text.x = element_text(angle = 90, hjust = 1),       aspect.ratio = 1) + labs(title = 'Histogram: Video Games Released by Year',      subtitle = 'Worldwide Sales (Not Including N/A)',      x = 'Year',      y = '# Video Games Released') + scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") + scale_x_continuous(breaks = seq(1980, 2020, by = 2))
dYear <- as.numeric(as.character(vgdata$Year)) #convert string to continuous variable ggplot(vgdata, aes(dYear)) + geom_histogram(binwidth = 1,                aes(fill = ..count..),                col = 'darkgreen',                alpha = .8) + geom_density(col = "#FF5733") + theme_set(theme_classic(10)) + theme(axis.text.x = element_text(angle = 90, hjust = 1),       aspect.ratio = 1) + labs(title = 'Histogram: Video Games Released by Year',      subtitle = 'Worldwide Sales (Not Including N/A)',      x = 'Year',      y = '# Video Games Released') + scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") + scale_x_continuous(breaks = seq(1980, 2020, by = 2))
dYear <- as.numeric(as.character(vgdata$Year)) #convert string to continuous variable ggplot(vgdata, aes(dYear)) + geom_histogram(binwidth = 1,                aes(fill = ..count..),                col = 'darkgreen',                alpha = .8) + stat_density(col = "#FF5733",              aes(y = ..count..),              alpha = 0,              adjust = 2) + theme_set(theme_classic(10)) + theme(axis.text.x = element_text(angle = 90, hjust = 1),       aspect.ratio = 1) + labs(title = 'Histogram: Video Games Released by Year',      subtitle = 'Worldwide Sales (Not Including N/A)',      x = 'Year',      y = '# Video Games Released') + scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") + scale_x_continuous(breaks = seq(1980, 2020, by = 2))
dYear <- as.numeric(as.character(vgdata$Year)) #convert string to continuous variable ggplot(vgdata, aes(dYear)) + geom_histogram(binwidth = 1,                aes(fill = ..count..),                col = 'darkgreen',                alpha = .8) + #geom_density(col = "#FF5733", # trend line #             aes(y = ..count..), #             alpha = 0, #             adjust = 2) + theme_set(theme_classic(10)) + theme(axis.text.x = element_text(angle = 90, hjust = 1),       aspect.ratio = 1) + labs(title = 'Histogram: Video Games Released by Year',      subtitle = 'Worldwide Sales (Not Including N/A)',      x = 'Year',      y = '# Video Games Released') + scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") + scale_x_continuous(breaks = seq(1980, 2020, by = 2))
dYear <- as.numeric(as.character(vgdata$Year)) #convert string to continuous variable ggplot(vgdata, aes(dYear)) + geom_histogram(binwidth = 1,                aes(fill = ..count..),                col = 'darkgreen',                alpha = .8) + #geom_density(col = "#FF5733", # trend line #             aes(y = ..count..), #             alpha = 0, #             adjust = 2) + theme_set(theme_minimal(10)) + theme(axis.text.x = element_text(angle = 90, hjust = 1),       aspect.ratio = 1) + labs(title = 'Histogram: Video Games Released by Year',      subtitle = 'Worldwide Sales (Not Including N/A)',      x = 'Year',      y = '# Video Games Released') + scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") + scale_x_continuous(breaks = seq(1980, 2020, by = 2))
dYear <- as.numeric(as.character(vgdata$Year)) #convert string to continuous variable ggplot(vgdata, aes(dYear)) + geom_histogram(binwidth = 1,                aes(fill = ..count..),                col = 'darkgreen',                alpha = .8) + #geom_density(col = "#FF5733", # trend line #             aes(y = ..count..), #             alpha = 0, #             adjust = 2) + theme_set(theme_minimal(10)) + theme(axis.text.x = element_text(angle = 90, hjust = 1),       aspect.ratio = 1) + labs(title = 'Histogram: Video Games Released by Year',      subtitle = 'Worldwide Sales (Not Including N/A)',      x = 'Year',      y = '# Video Games Released') + scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") + scale_x_continuous(breaks = seq(1980, 2020, by = 2))
ggplot(vgdata, aes(x = reorder(Platform,                                Platform,                                function(x) - -length(x)))) +                                geom_bar(aes(fill = ..count..),          col = 'darkgreen',          width = .8,          alpha = .8) + theme_set(theme_minimal(10)) + theme(aspect.ratio = 1,       legend.position = 'top') + labs(title = 'Bar Graph: Video Games Released by Platform',      subtitle = 'Worldwide Releases',      x = 'Platform',      y = '# Video Games Released') + scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") + coord_flip()
ggplot(vgdata, aes(x = reorder(Platform,                                Platform,                                function(x) + length(x)))) +                                geom_bar(aes(fill = ..count..),          col = 'darkgreen',          width = .8,          alpha = .8) + theme_set(theme_minimal(10)) + theme(aspect.ratio = 1,       legend.position = 'top') + labs(title = 'Bar Graph: Video Games Released by Platform',      subtitle = 'Worldwide Releases',      x = 'Platform',      y = '# Video Games Released') + scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") + coord_flip()
pubs <- data.frame(table(vgdata$Publisher)) colnames(pubs)[colnames(pubs) == 'Var1'] <- 'Publisher' colnames(pubs)[colnames(pubs) == 'Freq'] <- 'Count' Top.Publishers <- subset(pubs, pubs$Count > 100) #Top.Publishers b3 = ggplot(Top.Publishers,             aes(Publisher, Count)) +      geom_bar() +      labs(title = 'Bar Chart: Top Game Publishers',           subtitle = 'Worldwide Sales',           x = 'Publishers',           y = '# Video Games Released') b3
# install packages install.packages('dplyr', repos = "http://cran.us.r-project.org") update.packages('ggplot2', repos = "http://cran.us.r-project.org") install.packages('ggthemes', dependencies = TRUE, repos = "http://cran.us.r-project.org") install.packages('Hmisc', repos = "http://cran.us.r-project.org") install.packages('plotly', repos = "http://cran.us.r-project.org") install.packages('gridExtra', repos = "http://cran.us.r-project.org") library(ggplot2) library(ggthemes) library(Hmisc) library(plotly) library(dplyr) library(gridExtra) #library(data.table)
                            Global.Mean = mean(Global_Sales),
oldw <- getOption("warn") options(warn = -1) # install packages install.packages('dplyr', repos = "http://cran.us.r-project.org") install.packages('ggplot2', repos = "http://cran.us.r-project.org") install.packages('corrplot', repos = "http://cran.us.r-project.org") install.packages('ggcorrplot', repos = "http://cran.us.r-project.org") install.packages('PerformanceAnalytics', repos = "http://cran.us.r-project.org") install.packages('GGally', repos = "http://cran.us.r-project.org") install.packages('ggthemes', dependencies = TRUE, repos = "http://cran.us.r-project.org") install.packages('Hmisc', repos = "http://cran.us.r-project.org") install.packages('plotly', repos = "http://cran.us.r-project.org") install.packages('gridExtra', repos = "http://cran.us.r-project.org") install.packages('reshape2', repos = "http://cran.us.r-project.org") install.packages('alr3', repos = "http://cran.us.r-project.org") install.packages('tidyr', repos = "http://cran.us.r-project.org") library(ggplot2) library(corrplot) library(ggcorrplot) library(GGally) library(PerformanceAnalytics) library(ggthemes) library(Hmisc) library(plotly) library(dplyr) library(gridExtra) library(data.table) library(reshape2) library(alr3) library(tidyr) theme_set(theme_minimal(10)) options(warn = oldw)
# load the Data vgdata <- read.csv('vgsales.csv') #subset(vgdata, Genre == 'Puzzle')  # test preview data vgdata$Rank <- NULL #not needed vgdata$Name <- as.factor(vgdata$Name) vgdata$Platform <- as.factor(vgdata$Platform) vgdata$Genre <- as.factor(vgdata$Genre) vgdata$Publisher <- as.factor(vgdata$Publisher) vgdata$Year <- as.numeric(as.character(vgdata$Year)) #convert to continuous variable vgdata$NA_Sales <- as.numeric(as.character(vgdata$NA_Sales)) vgdata$EU_Sales <- as.numeric(as.character(vgdata$EU_Sales)) vgdata$JP_Sales <- as.numeric(as.character(vgdata$JP_Sales)) vgdata$Other_Sales <- as.numeric(as.character(vgdata$Other_Sales)) vgdata$Global_Sales <- as.numeric(as.character(vgdata$Global_Sales)) #Create Decade Column vgdata$Decade <- vgdata$Year vgdata$Decade[vgdata$Year < 1990] <- '80s' vgdata$Decade[vgdata$Year >= 1990 & vgdata$Year < 2000] <- '90s' vgdata$Decade[vgdata$Year >= 2000 & vgdata$Year < 2010] <- '00s' vgdata$Decade[vgdata$Year >= 2010 & vgdata$Year < 2020] <- '10s' vgdata$Decade[vgdata$Year >= 2020] <- '20s' vgdata$Decade <- as.factor(vgdata$Decade) #Create Franchise Column vgdata$Franchise <- ifelse(grepl('Pokemon', vgdata$Name, ignore.case = TRUE), 'Pokemon',                  ifelse(grepl('LEGO', vgdata$Name, ignore.case = TRUE), 'LEGO',                  ifelse(grepl('FIFA', vgdata$Name, ignore.case = TRUE), 'FIFA',                  ifelse(grepl('Madden', vgdata$Name, ignore.case = TRUE), 'Madden',                  ifelse(grepl('Cars', vgdata$Name, ignore.case = TRUE), 'Cars',                  ifelse(grepl('Need for Speed', vgdata$Name, ignore.case = TRUE), 'Need for Speed',                  ifelse(grepl('Resident Evil', vgdata$Name, ignore.case = TRUE), 'Resident Evil',                  ifelse(grepl('Call of Duty', vgdata$Name, ignore.case = TRUE), 'Call of Duty',                  ifelse(grepl('Halo', vgdata$Name, ignore.case = TRUE), 'Halo',                  ifelse(grepl('Final Fantasy', vgdata$Name, ignore.case = TRUE), 'Final Fantasy',                  ifelse(grepl('Guitar Hero', vgdata$Name, ignore.case = TRUE), 'Guitar Hero',                  ifelse(grepl('Rock Band', vgdata$Name, ignore.case = TRUE), 'Rock Band',                  ifelse(grepl('Barbie', vgdata$Name, ignore.case = TRUE), 'Barbie',                  ifelse(grepl('Batman', vgdata$Name, ignore.case = TRUE), 'Batman',                  ifelse(grepl('Battlefield', vgdata$Name, ignore.case = TRUE), 'Battlefield',                  ifelse(grepl('BioShock', vgdata$Name, ignore.case = TRUE), 'BioShock',                  ifelse(grepl('Fallout', vgdata$Name, ignore.case = TRUE), 'Fallout',                  ifelse(grepl('Borderlands', vgdata$Name, ignore.case = TRUE), 'Borderlands',                  ifelse(grepl('Burnout', vgdata$Name, ignore.case = TRUE), 'Burnout',                  ifelse(grepl('Forza', vgdata$Name, ignore.case = TRUE), 'Forza',                  ifelse(grepl('Assassin\'s', vgdata$Name, ignore.case = TRUE), 'Assassin\'s Creed',                  ifelse(grepl('Cabela\'s', vgdata$Name, ignore.case = TRUE), 'Cabela\'s',                  ifelse(grepl('Castlevania', vgdata$Name, ignore.case = TRUE), 'Castlevania',                  ifelse(grepl('Dance Dance Revolution', vgdata$Name, ignore.case = TRUE), 'Dance Dance Revolution',                  ifelse(grepl('Skylanders', vgdata$Name, ignore.case = TRUE), 'Skylanders',                  ifelse(grepl('Disney Infinity', vgdata$Name, ignore.case = TRUE), 'Disney Infinity',                  ifelse(grepl('Donkey Kong', vgdata$Name, ignore.case = TRUE), 'Donkey Kong',                  ifelse(grepl('Dragon Ball', vgdata$Name, ignore.case = TRUE), 'Dragon Ball',                  ifelse(grepl('Dragon Quest', vgdata$Name, ignore.case = TRUE), 'Dragon Quest',                  ifelse(grepl('Dynasty Warriors', vgdata$Name, ignore.case = TRUE), 'Dynasty Warriors',                  ifelse(grepl('ESPN', vgdata$Name, ignore.case = TRUE), 'ESPN Sports',                  ifelse(grepl('Grand Theft Auto', vgdata$Name, ignore.case = TRUE), 'Grand Theft Auto',                  ifelse(grepl('007', vgdata$Name, ignore.case = TRUE), 'James Bond',                  ifelse(grepl('Mario', vgdata$Name, ignore.case = TRUE), 'Mario Brothers',                  ifelse(grepl('Marvel', vgdata$Name, ignore.case = TRUE), 'Marvel',                  ifelse(grepl('Mega Man', vgdata$Name, ignore.case = TRUE), 'Mega Man',                  ifelse(grepl('Metal Gear Solid', vgdata$Name, ignore.case = TRUE), 'Metal Gear Solid',                  ifelse(grepl('Prince of Persia', vgdata$Name, ignore.case = TRUE), 'Prince of Persia',                  ifelse(grepl('Sonic', vgdata$Name, ignore.case = TRUE), 'Sonic',                  ifelse(grepl('Spider-Man', vgdata$Name, ignore.case = TRUE), 'Spider-Man',                  ifelse(grepl('Star Wars', vgdata$Name, ignore.case = TRUE), 'Star Wars',                  ifelse(grepl('Tales of', vgdata$Name, ignore.case = TRUE), 'Tales of',                  ifelse(grepl('The Legend of Zelda', vgdata$Name, ignore.case = TRUE), 'Zelda',                  ifelse(grepl('Tetris', vgdata$Name, ignore.case = TRUE), 'Tetris',                  ifelse(grepl('The Sims', vgdata$Name, ignore.case = TRUE), 'The Sims', 'Other'                  ))))))))))))))))))))))))))))))))))))))))))))) vgdata$Franchise <- as.factor(vgdata$Franchise) #Create Console_Company Column vgdata$Console_Company <- as.character('Other') vgdata$Console_Company[vgdata$Platform %in% c('XOne', 'XB', 'X360')] <- 'Microsoft' vgdata$Console_Company[vgdata$Platform %in% c('PS', 'PS2', 'PS3', 'PS4', 'PSP', 'PSV')] <- 'Sony' vgdata$Console_Company[vgdata$Platform %in% c('3DS', 'DS', 'GB', 'GBA', 'GC', 'N64', 'NES', 'SNES', 'NS', 'Wii', 'WiiU')] <- 'Nintendo' vgdata$Console_Company[vgdata$Platform %in% c('DC', 'GEN', 'SAT', 'SCD')] <- 'Sega' vgdata$Console_Company[vgdata$Platform %in% c('PC')] <- 'PC' vgdata$Console_Company[vgdata$Platform %in% c('2600')] <- 'Atari' vgdata$Console_Company <- as.factor(vgdata$Console_Company) head(vgdata) tail(vgdata) NA.Units <- vgdata$NA_Sales EU.Units <- vgdata$EU_Sales JP.Units <- vgdata$JP_Sales Other.Units <- vgdata$Other_Sales Global.Units <- vgdata$Global_Sales
summary(vgdata)
theme_set(theme_minimal(10)) h1 = ggplot(na.omit(vgdata), aes(Year)) +      geom_histogram(binwidth = 1,                     aes(fill = ..count..),                     col = 'darkgreen',                     alpha = .6) + #geom_density(col = "#FF5733", # trend line #             aes(y = ..count..), #             alpha = 0, #             adjust = 2) + theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3) +      labs(x = 'Year',           y = 'Count') +      scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") +      scale_x_continuous(breaks = seq(1980, 2020, by = 2)) h1 `
h2 = ggplot(vgdata, aes(Global.Units)) +      geom_histogram(bins = 24,                     aes(fill = ..count..),                     col = 'darkgreen',                     alpha = .6) +      theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3) +      labs(x = 'Units Sold (millions)',           y = '# in Bin') +      scale_fill_gradient("# in Bin", high = "#78c95f", low = "#267b8c") h2
h2 = ggplot(vgdata, aes(Global.Units)) +      geom_histogram(bins = 24,                     aes(fill = ..count..),                     col = 'darkgreen',                     alpha = .6) +      theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3) +      labs(x = 'Units Sold (millions)',           y = '# in Bin') +      scale_fill_gradient("# in Bin", high = "#78c95f", low = "#267b8c") h2
h2 = ggplot(vgdata, aes(Global.Units)) +      geom_histogram(bins = 24,                     aes(fill = ..count..),                     col = 'darkgreen',                     alpha = .6) +      theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3) +      labs(x = 'Units Sold (millions)',           y = '# in Bin') +      scale_fill_gradient("# in Bin", high = "#78c95f", low = "#267b8c") h2
h3 = ggplot(vgdata, aes(Global.Units)) +      geom_histogram(bins = 24,                     aes(fill = ..count..),                     col = 'darkgreen',                     alpha = .6) +      theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3) +      labs(x = 'Units Shipped (millions)',           y = '# in Bin') +      scale_fill_gradient("# in Bin", high = "#78c95f", low = "#267b8c") +      scale_x_log10(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 7.68, 15.36, 30.72, 61.44, 122.88)) h3 b3
h3 = ggplot(vgdata, aes(Global.Units)) +      geom_histogram(bins = 24,                     col = 'darkgreen',                     alpha = .6) +      theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3) +      labs(x = 'Units Shipped (millions)',           y = '# in Bin') +      scale_fill_gradient("# in Bin", high = "#78c95f", low = "#267b8c") +      scale_x_log10(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 7.68, 15.36, 30.72, 61.44, 122.88)) h3 b3
h3 = ggplot(vgdata, aes(Global.Units)) +      geom_histogram(bins = 24,                     aes(fill = ..count..),                     col = 'darkgreen',                     alpha = .6) +      theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3) +      labs(x = 'Units Shipped (millions)',           y = '# in Bin') +      scale_fill_gradient("# in Bin", high = "#78c95f", low = "#267b8c") +      scale_x_log10(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 7.68, 15.36, 30.72, 61.44, 122.88)) h3 b3
h3 = ggplot(vgdata, aes(Global.Units)) +      geom_histogram(stat = 'identity', 					bins = 24,                     aes(fill = ..count..),                     col = 'darkgreen',                     alpha = .6) +      theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3) +      labs(x = 'Units Shipped (millions)',           y = '# in Bin') +      scale_fill_gradient("# in Bin", high = "#78c95f", low = "#267b8c") +      scale_x_log10(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 7.68, 15.36, 30.72, 61.44, 122.88)) h3 b3
h3 = ggplot(vgdata, aes(Global.Units)) +      geom_histogram(bins = 24,                     aes(fill = ..count..),                     col = 'darkgreen',                     alpha = .6) +      theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3) +      labs(x = 'Units Shipped (millions)',           y = '# in Bin') +      scale_fill_gradient("# in Bin", high = "#78c95f", low = "#267b8c") +      scale_x_log10(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 7.68, 15.36, 30.72, 61.44, 122.88)) h3 b3
h3 = ggplot(vgdata, aes(Global.Units)) +      geom_histogram(bins = 24,                     aes(fill = ..count..),                     col = 'darkgreen',                     alpha = .6) +      theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3) +      labs(x = 'Units Shipped (millions)',           y = '# in Bin') +      scale_fill_gradient("# in Bin", high = "#78c95f", low = "#267b8c") +      scale_x_log10(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 7.68, 15.36, 30.72, 61.44, 122.88)) h3
h3 = ggplot(vgdata, aes(Global.Units)) +      geom_histogram(bins = 24,                     aes(fill = ..count..),                     col = 'darkgreen',                     alpha = .6) +      theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3) +      labs(x = 'Units Shipped (millions)',           y = '# in Bin') +      scale_fill_gradient("# in Bin", high = "#78c95f", low = "#267b8c") +      scale_x_log10(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 7.68, 15.36, 30.72, 61.44, 122.88)) h3
b1 = ggplot(vgdata, aes(x = reorder(Genre,                                     Genre,                                     function(x) + length(x)))) +                                     geom_bar(aes(fill = ..count..),               col = 'darkgreen',               width = .8,               alpha = .6) +      theme(aspect.ratio = 2 / 3,            legend.position = 'top') +      labs(x = 'Genre',           y = 'Count') +      scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") +      coord_flip() b1
b2 = ggplot(vgdata, aes(x = reorder(Platform,                                     Platform,                                     function(x) + length(x)))) +                                     geom_bar(aes(fill = ..count..),               col = 'darkgreen',               width = .8,               alpha = .6) +      theme(aspect.ratio = 3 / 2,            legend.position = 'top') +      labs(#title = 'Bar Plot: Video Games Released by Platform', #subtitle = 'Worldwide Releases',           x = 'Platform',           y = 'Count') +      scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") +      coord_flip() b2
b2 = ggplot(vgdata, aes(x = reorder(Platform,                                     Platform,                                     function(x) + length(x)))) +                                     geom_bar(aes(fill = ..count..),               col = 'darkgreen',               width = .8,               alpha = .6) +      theme(aspect.ratio = 3 / 2,            legend.position = 'top') +      labs(#title = 'Bar Plot: Video Games Released by Platform', #subtitle = 'Worldwide Releases',           x = 'Platform',           y = 'Count') +      scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") +      coord_flip() b2
b3 = ggplot(vgdata, aes(x = Console_Company)) +      geom_bar(aes(fill = ..count..),               col = 'darkgreen',               width = .8,               alpha = .6) +      theme(aspect.ratio = 2 / 3,            legend.position = 'top') +      labs(x = 'Platform Company',           y = 'Titles on Company Platforms') +      scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") b3
# create new data frame for publisher count pubs <- data.frame(table(vgdata$Publisher)) colnames(pubs)[colnames(pubs) == 'Var1'] <- 'Publisher' colnames(pubs)[colnames(pubs) == 'Freq'] <- 'Count' Top.Publishers <- subset(pubs, pubs$Count > 100) summarize(Top.Publishers) b4 = ggplot(Top.Publishers,             aes(reorder(Publisher, Count), Count)) +      geom_bar(stat = 'identity',               aes(fill = Count),               col = 'darkgreen',               width = .8,               alpha = .6) +      theme(aspect.ratio = 3 / 2,            legend.position = 'top') +      labs(#title = 'Bar Plot: Publishers with Greater Than 100 Game Titles', #subtitle = 'Worldwide Releases',           x = 'Platform',           y = 'Count') +      scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") +      coord_flip() b4
# create new data frame for name count names <- data.frame(table(vgdata$Name)) colnames(names)[colnames(names) == 'Var1'] <- 'Name' colnames(names)[colnames(names) == 'Freq'] <- 'Count' Top.Names <- subset(names, names$Count >= 7) summary(Top.Names) b5 = ggplot(Top.Names,             aes(reorder(Name, Count), Count)) +      geom_bar(stat = 'identity',               aes(fill = Count),               col = 'darkgreen',               width = .8,               alpha = .6) +      theme_set(theme_minimal(10)) +      theme(aspect.ratio = 3 / 2,            legend.position = 'top') +      labs(#title = 'Bar Graph: Game Titles on the Most Platforms', #subtitle = 'Worldwide Releases',           x = 'Game Title',           y = 'Count') +      scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") +      coord_flip() b5
# create new data frame for name count names <- data.frame(table(vgdata$Name)) colnames(names)[colnames(names) == 'Var1'] <- 'Name' colnames(names)[colnames(names) == 'Freq'] <- 'Count' Top.Names <- subset(names, names$Count >= 7) summary(Top.Names) b5 = ggplot(Top.Names,             aes(reorder(Name, Count), Count)) +      geom_bar(stat = 'identity',               aes(fill = Count),               col = 'darkgreen',               width = .8,               alpha = .6) +      theme_set(theme_minimal(10)) +      theme(aspect.ratio = 3 / 2,            legend.position = 'top') +      labs(#title = 'Bar Graph: Game Titles on the Most Platforms', #subtitle = 'Worldwide Releases',           x = 'Game Title',           y = 'Count') +      scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") +      coord_flip() b5
# create new data frame for franchise count frans <- data.frame(table(vgdata$Franchise)) colnames(frans)[colnames(frans) == 'Var1'] <- 'Franchise' colnames(frans)[colnames(frans) == 'Freq'] <- 'Count' Top.Franchises <- subset(frans, Franchise != 'Other') summary(Top.Franchises) b6 = ggplot(Top.Franchises,             aes(reorder(Franchise, Count), Count)) +      geom_bar(stat = 'identity',               aes(fill = Count),               col = 'darkgreen',               width = .8,               alpha = .6) +      theme_set(theme_minimal(10)) +      theme(aspect.ratio = 3 / 2,            legend.position = 'top') +      labs(#title = 'Bar Graph: Game Titles on the Most Platforms', #subtitle = 'Worldwide Releases',           x = 'Franchise',           y = 'Titles Shipped') +      scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") +      coord_flip() b6
# create new data frame for franchise count frans <- data.frame(table(vgdata$Franchise)) colnames(frans)[colnames(frans) == 'Var1'] <- 'Franchise' colnames(frans)[colnames(frans) == 'Freq'] <- 'Count' Top.Franchises <- subset(frans, Franchise != 'Other') summary(Top.Franchises) b6 = ggplot(Top.Franchises,             aes(reorder(Franchise, Count), Count)) +      geom_bar(stat = 'identity',               aes(fill = Count),               col = 'darkgreen',               width = .8,               alpha = .6) +      theme_set(theme_minimal(8)) +      theme(aspect.ratio = 3 / 2,            legend.position = 'top') +      labs(#title = 'Bar Graph: Game Titles on the Most Platforms', #subtitle = 'Worldwide Releases',           x = 'Franchise',           y = 'Titles Shipped') +      scale_fill_gradient("Count", high = "#78c95f", low = "#267b8c") +      coord_flip() b6
str(vgdata)
#Reference:  https://stackoverflow.com/questions/16194212/how-to-suppress-warnings-globally-in-an-r-script oldw <- getOption("warn") options(warn = -1) games.corr <- data.frame(NA.Units,                          EU.Units,                          JP.Units,                          Other.Units,                          Global.Units) melt.corr <- melt(cor(games.corr)) #Reference:  http://www.sthda.com/english/wiki/correlation-matrix-formatting-and-visualization#at_pco=smlwn-1.0&at_si=5927942aff9eb0fb&at_ab=per-2&at_pos=0&at_tot=1 cp1 <- chart.Correlation(games.corr,                          histogram = FALSE) options(warn = oldw)
summary(games.corr)
#Scatter plot for mean and qualitle for global units shippeed pp1 = ggplot(na.omit(vgdata), aes(Year, Global_Sales)) +       geom_point(col = '#a65481',                  alpha = .1,                  position = 'jitter') +       geom_line(stat = 'summary',                 fun.y = quantile,                 fun.args = list(probs = 0.1),                 linetype = 2,                 col = 'darkred') +       geom_line(stat = 'summary',                 fun.y = quantile,                 fun.args = list(probs = 0.9),                 linetype = 2,                 col = 'blue') +       geom_line(stat = 'summary', fun.y = mean) +       theme(axis.text.x = element_text(angle = 90,                                        hjust = 1),             aspect.ratio = 2 / 3) +       labs(x = 'Year',            y = 'Global Units') +       coord_trans(y = 'log10') +       scale_x_continuous(breaks = seq(1980, 2020, by = 2)) +       scale_y_continuous(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 7.68, 15.36, 30.72, 61.44, 122.88)) pp1
Summary.Genre = na.omit(vgdata) %>%                   group_by(Genre) %>%                   summarise(NA.Sum = sum(NA_Sales),                             NA.Mean = mean(NA_Sales),                             NA.Median = median(NA_Sales),                             NA.Quant.90 = quantile(NA_Sales, probs = .9),                             NA.Quant.10 = quantile(NA_Sales, probs = .1),                             EU.Sum = sum(EU_Sales),                             EU.Mean = mean(EU_Sales),                             EU.Median = median(EU_Sales),                             EU.Quant.90 = quantile(EU_Sales, probs = .9),                             EU.Quant.10 = quantile(EU_Sales, probs = .1),                             JP.Sum = sum(JP_Sales),                             JP.Mean = mean(JP_Sales),                             JP.Median = median(JP_Sales),                             JP.Quant.90 = quantile(JP_Sales, probs = .9),                             JP.Quant.10 = quantile(JP_Sales, probs = .1),                             Other.Sum = sum(Other_Sales),                             Other.Mean = mean(Other_Sales),                             Other.Median = median(Other_Sales),                             Other.Quant.90 = quantile(Other_Sales, probs = .9),                             Other.Quant.10 = quantile(Other_Sales, probs = .1),                             Global.Sum = sum(Global_Sales),                             Global.Mean = mean(Global_Sales),                             Global.Median = median(Global_Sales),                             Global.Quant.90 = quantile(Global_Sales, probs = .9),                             Global.Quant.10 = quantile(Global_Sales, probs = .1),                             Count = n()) %>%               mutate(Percent = Count / sum(Count)) %>%               arrange(Genre) head(Summary.Genre)
Summary.Genre = na.omit(vgdata) %>%                   group_by(Genre) %>%                   summarise(NA.Sum = sum(NA_Sales),                             NA.Mean = mean(NA_Sales),                             NA.Median = median(NA_Sales),                             NA.Quant.90 = quantile(NA_Sales, probs = .9),                             NA.Quant.10 = quantile(NA_Sales, probs = .1),                             EU.Sum = sum(EU_Sales),                             EU.Mean = mean(EU_Sales),                             EU.Median = median(EU_Sales),                             EU.Quant.90 = quantile(EU_Sales, probs = .9),                             EU.Quant.10 = quantile(EU_Sales, probs = .1),                             JP.Sum = sum(JP_Sales),                             JP.Mean = mean(JP_Sales),                             JP.Median = median(JP_Sales),                             JP.Quant.90 = quantile(JP_Sales, probs = .9),                             JP.Quant.10 = quantile(JP_Sales, probs = .1),                             Other.Sum = sum(Other_Sales),                             Other.Mean = mean(Other_Sales),                             Other.Median = median(Other_Sales),                             Other.Quant.90 = quantile(Other_Sales, probs = .9),                             Other.Quant.10 = quantile(Other_Sales, probs = .1),                             Global.Sum = sum(Global_Sales),                             Global.Mean = mean(Global_Sales),                             Global.Median = median(Global_Sales),                             Global.Quant.90 = quantile(Global_Sales, probs = .9),                             Global.Quant.10 = quantile(Global_Sales, probs = .1),                             Count = n()) %>%               mutate(Percent = Count / sum(Count)) %>%               arrange(Genre) head(Summary.Genre) bp1 = ggplot(vgdata, aes(x = Genre,                          y = Global.Units,                          color = Genre)) +       geom_boxplot(outlier.color = NULL,                    outlier.alpha = .3,                    aes(fill = Genre),                    alpha = .4) +       geom_point(stat = 'summary',                 aes(group = 1,                     col = Genre),                 fun.y = mean) +       theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3) +       labs(#title = 'Histogram: Video Games Released by Year', #     subtitle = 'Worldwide Units Shipped (Not Including N/A)',           x = 'Genre',           y = 'Global Units Shipped') +       scale_y_log10(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 7.68, 15.36, 30.72, 61.44, 122.88)) bp1
Summary.Genre = na.omit(vgdata) %>%                   group_by(Genre) %>%                   summarise(NA.Sum = sum(NA_Sales),                             NA.Mean = mean(NA_Sales),                             NA.Median = median(NA_Sales),                             NA.Quant.90 = quantile(NA_Sales, probs = .9),                             NA.Quant.10 = quantile(NA_Sales, probs = .1),                             EU.Sum = sum(EU_Sales),                             EU.Mean = mean(EU_Sales),                             EU.Median = median(EU_Sales),                             EU.Quant.90 = quantile(EU_Sales, probs = .9),                             EU.Quant.10 = quantile(EU_Sales, probs = .1),                             JP.Sum = sum(JP_Sales),                             JP.Mean = mean(JP_Sales),                             JP.Median = median(JP_Sales),                             JP.Quant.90 = quantile(JP_Sales, probs = .9),                             JP.Quant.10 = quantile(JP_Sales, probs = .1),                             Other.Sum = sum(Other_Sales),                             Other.Mean = mean(Other_Sales),                             Other.Median = median(Other_Sales),                             Other.Quant.90 = quantile(Other_Sales, probs = .9),                             Other.Quant.10 = quantile(Other_Sales, probs = .1),                             Global.Sum = sum(Global_Sales),                             Global.Mean = mean(Global_Sales),                             Global.Median = median(Global_Sales),                             Global.Quant.90 = quantile(Global_Sales, probs = .9),                             Global.Quant.10 = quantile(Global_Sales, probs = .1),                             Count = n()) %>%               mutate(Percent = Count / sum(Count)) %>%               arrange(Genre) head(Summary.Genre) bp1 = ggplot(vgdata, aes(x = Genre,                           y = Global.Units,                          color = Genre)) +       geom_boxplot(outlier.color = NULL,                    outlier.alpha = .3,                    aes(fill = Genre),                    alpha = .4) +       geom_point(stat = 'summary',                  aes(group = 1,                      col = Genre),                  fun.y = mean) +          theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2/3) +       labs(#title = 'Histogram: Video Games Released by Year',       #     subtitle = 'Worldwide Units Shipped (Not Including N/A)',           x = 'Genre',           y = 'Global Units Shipped') +       scale_y_log10(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 7.68, 15.36, 30.72, 61.44, 122.88)) bp1
bp1 = ggplot(vgdata, aes(x = Genre,                          y = Global.Units,                          color = Genre)) +       geom_boxplot(outlier.color = NULL,                    outlier.alpha = .3,                    aes(fill = Genre),                    alpha = .4) +       geom_point(stat = 'summary',                 aes(group = 1,                     col = Genre),                 fun.y = mean) +       theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3) +       labs(#title = 'Histogram: Video Games Released by Year', #     subtitle = 'Worldwide Units Shipped (Not Including N/A)',           x = 'Genre',           y = 'Global Units Shipped') +       scale_y_log10(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 7.68, 15.36, 30.72, 61.44, 122.88)) bp1
bp1 = ggplot(vgdata, aes(x = Genre,                          y = Global.Units,                          color = Genre)) +       geom_boxplot(outlier.color = NULL,                    aes(fill = Genre),                    alpha = .4) +       geom_point(stat = 'summary',                 aes(group = 1,                     col = Genre),                 fun.y = mean) +       theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3) +       labs(#title = 'Histogram: Video Games Released by Year', #     subtitle = 'Worldwide Units Shipped (Not Including N/A)',           x = 'Genre',           y = 'Global Units Shipped') +       scale_y_log10(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 7.68, 15.36, 30.72, 61.44, 122.88)) bp1
bp2 = ggplot(vgdata, aes(x = Platform,                          y = Global_Sales,                          color = Platform)) +       geom_boxplot(outlier.color = NULL,                    aes(fill = Platform),                    alpha = .4) +       geom_point(stat = 'summary',                 aes(group = 1,                     col = Platform),                 fun.y = mean) +       theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3,            legend.position = 'none') +       labs(title = 'Box Plot: Global Video Games Shipped on Each Platform by Decade', #     subtitle = 'Worldwide Units Shipped (Not Including N/A)',           x = 'Platform',           y = 'Global Units Shipped') +       scale_y_log10(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 7.68, 15.36, 30.72, 61.44, 122.88)) +       facet_wrap(~factor(Decade,                          levels = c("80s", "90s", "00s", "10s")),                  scales = 'free',                  nrow = 2) bp2
bp2 = ggplot(vgdata, aes(x = Platform,                          y = Global_Sales,                          color = Platform)) +       geom_boxplot(outlier.color = NULL,                    aes(fill = Platform),                    alpha = .4) +       geom_point(stat = 'summary',                 aes(group = 1,                     col = Platform),                 fun.y = mean) +       theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3,            legend.position = 'none') +       labs(title = 'Box Plot: Global Video Games Shipped on Each Platform by Decade', #     subtitle = 'Worldwide Units Shipped (Not Including N/A)',           x = 'Platform',           y = 'Global Units Shipped') +       scale_y_log10(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 7.68, 15.36, 30.72, 61.44, 122.88)) +       facet_wrap(~factor(Decade,                          levels = c("80s", "90s", "00s", "10s")),                  scales = 'free',                  nrow = 2) bp2
bp2 = ggplot(vgdata, aes(x = Platform,                          y = Global_Sales,                          color = Platform)) +       geom_boxplot(outlier.color = NULL,                    aes(fill = Platform),                    alpha = .4) +       geom_point(stat = 'summary',                 aes(group = 1,                     col = Platform),                 fun.y = mean) +       theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3,            legend.position = 'none') +       labs(#title = 'Box Plot: Global Video Games Shipped on Each Platform by Decade', #     subtitle = 'Worldwide Units Shipped (Not Including N/A)',           x = 'Platform',           y = 'Global Units Shipped') +       scale_y_log10(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 7.68, 15.36, 30.72, 61.44, 122.88)) +       facet_wrap(~factor(Decade,                          levels = c("80s", "90s", "00s", "10s")),                  scales = 'free',                  nrow = 2) bp2
bp2 = ggplot(vgdata, aes(x = Platform,                          y = Global_Sales,                          color = Platform)) +       geom_boxplot(outlier.color = NULL,                    aes(fill = Platform),                    alpha = .4) +       geom_point(stat = 'summary',                 aes(group = 1,                     col = Platform),                 fun.y = mean) +       theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3,            legend.position = 'none') +       labs(x = 'Platform',           y = 'Global Units Shipped') +       scale_y_log10(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 7.68, 							   15.36, 30.72, 61.44, 122.88)) +       facet_wrap(~factor(Decade,                          levels = c("80s", "90s", "00s", "10s")),                  scales = 'free',                  nrow = 2) bp2
bp2 = ggplot(vgdata, aes(x = Platform,                          y = Global_Sales,                          color = Platform)) +       geom_boxplot(outlier.color = NULL,                    aes(fill = Platform),                    alpha = .4) +       geom_point(stat = 'summary',                 aes(group = 1,                     col = Platform),                 fun.y = mean) +       theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3,            legend.position = 'none') +       scale_y_log10(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 7.68, 							   15.36, 30.72, 61.44, 122.88)) +       facet_wrap(~factor(Decade,                          levels = c("80s", "90s", "00s", "10s")),                  scales = 'free',                  nrow = 2) bp2
bp1 = ggplot(vgdata, aes(x = Genre,                          y = Global.Units,                          color = Genre)) +       geom_boxplot(outlier.color = NULL,                    aes(fill = Genre),                    alpha = .4) +       geom_point(stat = 'summary',                 aes(group = 1,                     col = Genre),                 fun.y = mean) +       theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3) +       labs(#title = 'Histogram: Video Games Released by Year', #     subtitle = 'Worldwide Units Shipped (Not Including N/A)',           x = 'Genre',           y = 'Global Units Shipped') +       scale_y_log10(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 								7.68, 15.36, 30.72, 61.44, 122.88)) bp1
bp1 = ggplot(vgdata, aes(x = Genre,                          y = Global.Units,                          color = Genre)) +       geom_boxplot(outlier.color = NULL,                    aes(fill = Genre),                    alpha = .4) +       geom_point(stat = 'summary',                 aes(group = 1,                     col = Genre),                 fun.y = mean) +       theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3) +       labs(#title = 'Histogram: Video Games Released by Year', #     subtitle = 'Worldwide Units Shipped (Not Including N/A)',           x = 'Genre',           y = 'Global Units Shipped') +       scale_y_log10(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 								7.68, 15.36, 30.72, 61.44, 122.88)) bp1
oldw <- getOption("warn") options(warn = -1) # install packages install.packages('dplyr', repos = "http://cran.us.r-project.org") install.packages('ggplot2', repos = "http://cran.us.r-project.org") install.packages('corrplot', repos = "http://cran.us.r-project.org") install.packages('ggcorrplot', repos = "http://cran.us.r-project.org") install.packages('PerformanceAnalytics', repos = "http://cran.us.r-project.org") install.packages('GGally', repos = "http://cran.us.r-project.org") install.packages('ggthemes', dependencies = TRUE, repos = "http://cran.us.r-project.org") install.packages('Hmisc', repos = "http://cran.us.r-project.org") install.packages('plotly', repos = "http://cran.us.r-project.org") install.packages('gridExtra', repos = "http://cran.us.r-project.org") install.packages('reshape2', repos = "http://cran.us.r-project.org") install.packages('alr3', repos = "http://cran.us.r-project.org") install.packages('tidyr', repos = "http://cran.us.r-project.org") library(ggplot2) library(corrplot) library(ggcorrplot) library(GGally) library(PerformanceAnalytics) library(ggthemes) library(Hmisc) library(plotly) library(dplyr) library(gridExtra) library(data.table) library(reshape2) library(alr3) library(tidyr) theme_set(theme_minimal(10)) options(warn = oldw)
# load the Data vgdata <- read.csv('vgsales.csv') #subset(vgdata, Genre == 'Puzzle')  # test preview data vgdata$Rank <- NULL #not needed vgdata$Name <- as.factor(vgdata$Name) vgdata$Platform <- as.factor(vgdata$Platform) vgdata$Genre <- as.factor(vgdata$Genre) vgdata$Publisher <- as.factor(vgdata$Publisher) vgdata$Year <- as.numeric(as.character(vgdata$Year)) #convert to continuous variable vgdata$NA_Sales <- as.numeric(as.character(vgdata$NA_Sales)) vgdata$EU_Sales <- as.numeric(as.character(vgdata$EU_Sales)) vgdata$JP_Sales <- as.numeric(as.character(vgdata$JP_Sales)) vgdata$Other_Sales <- as.numeric(as.character(vgdata$Other_Sales)) vgdata$Global_Sales <- as.numeric(as.character(vgdata$Global_Sales)) #Create Decade Column vgdata$Decade <- vgdata$Year vgdata$Decade[vgdata$Year < 1990] <- '80s' vgdata$Decade[vgdata$Year >= 1990 & vgdata$Year < 2000] <- '90s' vgdata$Decade[vgdata$Year >= 2000 & vgdata$Year < 2010] <- '00s' vgdata$Decade[vgdata$Year >= 2010 & vgdata$Year < 2020] <- '10s' vgdata$Decade[vgdata$Year >= 2020] <- '20s' vgdata$Decade <- as.factor(vgdata$Decade) #Create Franchise Column vgdata$Franchise <- ifelse(grepl('Pokemon', vgdata$Name, ignore.case = TRUE), 'Pokemon',                  ifelse(grepl('LEGO', vgdata$Name, ignore.case = TRUE), 'LEGO',                  ifelse(grepl('FIFA', vgdata$Name, ignore.case = TRUE), 'FIFA',                  ifelse(grepl('Madden', vgdata$Name, ignore.case = TRUE), 'Madden',                  ifelse(grepl('Cars', vgdata$Name, ignore.case = TRUE), 'Cars',                  ifelse(grepl('Need for Speed', vgdata$Name, ignore.case = TRUE), 'Need for Speed',                  ifelse(grepl('Resident Evil', vgdata$Name, ignore.case = TRUE), 'Resident Evil',                  ifelse(grepl('Call of Duty', vgdata$Name, ignore.case = TRUE), 'Call of Duty',                  ifelse(grepl('Halo', vgdata$Name, ignore.case = TRUE), 'Halo',                  ifelse(grepl('Final Fantasy', vgdata$Name, ignore.case = TRUE), 'Final Fantasy',                  ifelse(grepl('Guitar Hero', vgdata$Name, ignore.case = TRUE), 'Guitar Hero',                  ifelse(grepl('Rock Band', vgdata$Name, ignore.case = TRUE), 'Rock Band',                  ifelse(grepl('Barbie', vgdata$Name, ignore.case = TRUE), 'Barbie',                  ifelse(grepl('Batman', vgdata$Name, ignore.case = TRUE), 'Batman',                  ifelse(grepl('Battlefield', vgdata$Name, ignore.case = TRUE), 'Battlefield',                  ifelse(grepl('BioShock', vgdata$Name, ignore.case = TRUE), 'BioShock',                  ifelse(grepl('Fallout', vgdata$Name, ignore.case = TRUE), 'Fallout',                  ifelse(grepl('Borderlands', vgdata$Name, ignore.case = TRUE), 'Borderlands',                  ifelse(grepl('Burnout', vgdata$Name, ignore.case = TRUE), 'Burnout',                  ifelse(grepl('Forza', vgdata$Name, ignore.case = TRUE), 'Forza',                  ifelse(grepl('Assassin\'s', vgdata$Name, ignore.case = TRUE), 'Assassin\'s Creed',                  ifelse(grepl('Cabela\'s', vgdata$Name, ignore.case = TRUE), 'Cabela\'s',                  ifelse(grepl('Castlevania', vgdata$Name, ignore.case = TRUE), 'Castlevania',                  ifelse(grepl('Dance Dance Revolution', vgdata$Name, ignore.case = TRUE), 'Dance Dance Revolution',                  ifelse(grepl('Skylanders', vgdata$Name, ignore.case = TRUE), 'Skylanders',                  ifelse(grepl('Disney Infinity', vgdata$Name, ignore.case = TRUE), 'Disney Infinity',                  ifelse(grepl('Donkey Kong', vgdata$Name, ignore.case = TRUE), 'Donkey Kong',                  ifelse(grepl('Dragon Ball', vgdata$Name, ignore.case = TRUE), 'Dragon Ball',                  ifelse(grepl('Dragon Quest', vgdata$Name, ignore.case = TRUE), 'Dragon Quest',                  ifelse(grepl('Dynasty Warriors', vgdata$Name, ignore.case = TRUE), 'Dynasty Warriors',                  ifelse(grepl('ESPN', vgdata$Name, ignore.case = TRUE), 'ESPN Sports',                  ifelse(grepl('Grand Theft Auto', vgdata$Name, ignore.case = TRUE), 'Grand Theft Auto',                  ifelse(grepl('007', vgdata$Name, ignore.case = TRUE), 'James Bond',                  ifelse(grepl('Mario', vgdata$Name, ignore.case = TRUE), 'Mario Brothers',                  ifelse(grepl('Marvel', vgdata$Name, ignore.case = TRUE), 'Marvel',                  ifelse(grepl('Mega Man', vgdata$Name, ignore.case = TRUE), 'Mega Man',                  ifelse(grepl('Metal Gear Solid', vgdata$Name, ignore.case = TRUE), 'Metal Gear Solid',                  ifelse(grepl('Prince of Persia', vgdata$Name, ignore.case = TRUE), 'Prince of Persia',                  ifelse(grepl('Sonic', vgdata$Name, ignore.case = TRUE), 'Sonic',                  ifelse(grepl('Spider-Man', vgdata$Name, ignore.case = TRUE), 'Spider-Man',                  ifelse(grepl('Star Wars', vgdata$Name, ignore.case = TRUE), 'Star Wars',                  ifelse(grepl('Tales of', vgdata$Name, ignore.case = TRUE), 'Tales of',                  ifelse(grepl('The Legend of Zelda', vgdata$Name, ignore.case = TRUE), 'Zelda',                  ifelse(grepl('Tetris', vgdata$Name, ignore.case = TRUE), 'Tetris',                  ifelse(grepl('The Sims', vgdata$Name, ignore.case = TRUE), 'The Sims', 'Other'                  ))))))))))))))))))))))))))))))))))))))))))))) vgdata$Franchise <- as.factor(vgdata$Franchise) #Create Console_Company Column vgdata$Console_Company <- as.character('Other') vgdata$Console_Company[vgdata$Platform %in% c('XOne', 'XB', 'X360')] <- 'Microsoft' vgdata$Console_Company[vgdata$Platform %in% c('PS', 'PS2', 'PS3', 'PS4', 'PSP', 'PSV')] <- 'Sony' vgdata$Console_Company[vgdata$Platform %in% c('3DS', 'DS', 'GB', 'GBA', 'GC', 'N64', 'NES', 'SNES', 'NS', 'Wii', 'WiiU')] <- 'Nintendo' vgdata$Console_Company[vgdata$Platform %in% c('DC', 'GEN', 'SAT', 'SCD')] <- 'Sega' vgdata$Console_Company[vgdata$Platform %in% c('PC')] <- 'PC' vgdata$Console_Company[vgdata$Platform %in% c('2600')] <- 'Atari' vgdata$Console_Company <- as.factor(vgdata$Console_Company) head(vgdata) tail(vgdata) NA.Units <- vgdata$NA_Sales EU.Units <- vgdata$EU_Sales JP.Units <- vgdata$JP_Sales Other.Units <- vgdata$Other_Sales Global.Units <- vgdata$Global_Sales
bp1 = ggplot(vgdata, aes(x = Genre,                          y = Global.Units,                          color = Genre)) +       geom_boxplot(outlier.color = NULL,                    aes(fill = Genre),                    alpha = .4) +       geom_point(stat = 'summary',                 aes(group = 1,                     col = Genre),                 fun.y = mean) +       theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3) +       labs(#title = 'Histogram: Video Games Released by Year', #     subtitle = 'Worldwide Units Shipped (Not Including N/A)',           x = 'Genre',           y = 'Global Units Shipped') +       scale_y_log10(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 								7.68, 15.36, 30.72, 61.44, 122.88)) bp1
bp2 = ggplot(vgdata, aes(x = Platform,                          y = Global_Sales,                          color = Platform)) +       geom_boxplot(outlier.color = NULL,                    aes(fill = Platform),                    alpha = .4) +       geom_point(stat = 'summary',                 aes(group = 1,                     col = Platform),                 fun.y = mean) +       theme(axis.text.x = element_text(angle = 90, hjust = 1),             aspect.ratio = 2 / 3,             legend.position = 'none') +       labs(x = 'Platform',            y = 'Global Units Shipped') +       scale_y_log10(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 7.68, 							   15.36, 30.72, 61.44, 122.88)) +       facet_wrap(~factor(Decade,                          levels = c("80s", "90s", "00s", "10s")),                  scales = 'free',                  nrow = 2) bp2
Summary.Decade = na.omit(vgdata) %>%                   group_by(Decade) %>%                   summarise(NA.Sum = sum(NA_Sales),                             NA.Mean = mean(NA_Sales),                             NA.Median = median(NA_Sales),                             NA.Quant.90 = quantile(NA_Sales, probs = .9),                             NA.Quant.10 = quantile(NA_Sales, probs = .1),                             EU.Sum = sum(EU_Sales),                             EU.Mean = mean(EU_Sales),                             EU.Median = median(EU_Sales),                             EU.Quant.90 = quantile(EU_Sales, probs = .9),                             EU.Quant.10 = quantile(EU_Sales, probs = .1),                             JP.Sum = sum(JP_Sales),                             JP.Mean = mean(JP_Sales),                             JP.Median = median(JP_Sales),                             JP.Quant.90 = quantile(JP_Sales, probs = .9),                             JP.Quant.10 = quantile(JP_Sales, probs = .1),                             Other.Sum = sum(Other_Sales),                             Other.Mean = mean(Other_Sales),                             Other.Median = median(Other_Sales),                             Other.Quant.90 = quantile(Other_Sales, probs = .9),                             Other.Quant.10 = quantile(Other_Sales, probs = .1),                             Global.Sum = sum(Global_Sales),                             Global.Mean = mean(Global_Sales),                             Global.Median = median(Global_Sales),                             Global.Quant.90 = quantile(Global_Sales, probs = .9),                             Global.Quant.10 = quantile(Global_Sales, probs = .1),                             Count = n()) %>%               arrange(Decade) Summary.Decade
Summary.Decade = na.omit(vgdata) %>%                   group_by(Decade) %>%                   summarise(NA.Sum = sum(NA_Sales),                             NA.Mean = mean(NA_Sales),                             NA.Median = median(NA_Sales),                             NA.Quant.90 = quantile(NA_Sales, probs = .9),                             NA.Quant.10 = quantile(NA_Sales, probs = .1),                             EU.Sum = sum(EU_Sales),                             EU.Mean = mean(EU_Sales),                             EU.Median = median(EU_Sales),                             EU.Quant.90 = quantile(EU_Sales, probs = .9),                             EU.Quant.10 = quantile(EU_Sales, probs = .1),                             JP.Sum = sum(JP_Sales),                             JP.Mean = mean(JP_Sales),                             JP.Median = median(JP_Sales),                             JP.Quant.90 = quantile(JP_Sales, probs = .9),                             JP.Quant.10 = quantile(JP_Sales, probs = .1),                             Other.Sum = sum(Other_Sales),                             Other.Mean = mean(Other_Sales),                             Other.Median = median(Other_Sales),                             Other.Quant.90 = quantile(Other_Sales, probs = .9),                             Other.Quant.10 = quantile(Other_Sales, probs = .1),                             Global.Sum = sum(Global_Sales),                             Global.Mean = mean(Global_Sales),                             Global.Median = median(Global_Sales),                             Global.Quant.90 = quantile(Global_Sales, probs = .9),                             Global.Quant.10 = quantile(Global_Sales, probs = .1),                             Count = n()) %>%               arrange(Decade) Summary.Decade
bp3 = ggplot(vgdata,              aes(x = Console_Company,                          y = Global_Sales,                          color = Console_Company)) +       geom_boxplot(outlier.color = NULL,aes(fill = Console_Company),                    alpha = .4) +       geom_point(stat = 'summary',                 aes(group = 1,                     col = Console_Company),                 fun.y = mean) +       theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3,            legend.position = 'none') +       labs(x = 'Console_Company',            y = 'Global Units Shipped') +       scale_y_log10(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 7.68, 							   15.36, 30.72, 61.44, 122.88)) +       facet_wrap(~factor(Decade,                          levels = c("80s", "90s", "00s", "10s")),                  scales = 'free',                  nrow = 2) bp3
Summary.Franchise = na.omit(vgdata) %>%                   group_by(Franchise) %>%                   summarise(NA.Sum = sum(NA_Sales),                             NA.Mean = mean(NA_Sales),                             NA.Median = median(NA_Sales),                             NA.Quant.90 = quantile(NA_Sales, probs = .9),                             NA.Quant.10 = quantile(NA_Sales, probs = .1),                             EU.Sum = sum(EU_Sales),                             EU.Mean = mean(EU_Sales),                             EU.Median = median(EU_Sales),                             EU.Quant.90 = quantile(EU_Sales, probs = .9),                             EU.Quant.10 = quantile(EU_Sales, probs = .1),                             JP.Sum = sum(JP_Sales),                             JP.Mean = mean(JP_Sales),                             JP.Median = median(JP_Sales),                             JP.Quant.90 = quantile(JP_Sales, probs = .9),                             JP.Quant.10 = quantile(JP_Sales, probs = .1),                             Other.Sum = sum(Other_Sales),                             Other.Mean = mean(Other_Sales),                             Other.Median = median(Other_Sales),                             Other.Quant.90 = quantile(Other_Sales, 													  probs = .9),                             Other.Quant.10 = quantile(Other_Sales, 													  probs = .1),                             Global.Sum = sum(Global_Sales),                             Global.Mean = mean(Global_Sales),                             Global.Median = median(Global_Sales),                             Global.Quant.90 = quantile(Global_Sales, 													   probs = .9),                             Global.Quant.10 = quantile(Global_Sales, 													   probs = .1),                             Count = n()) %>%               mutate(Percent = Count / sum(Count)) %>%               arrange(Franchise) Summary.Franchise <- subset(Summary.Franchise, Franchise != 'Other') head(Summary.Franchise)
bp4 = ggplot(subset(vgdata, Franchise != 'Other'),              aes(x = Franchise,                  y = Global_Sales,                  color = Franchise)) +       geom_boxplot(outlier.color = NULL,                    outlier.alpha = .3,                    aes(fill = Franchise),                    alpha = .4) +       geom_point(stat = 'summary',                 aes(group = 1,                     col = Franchise),                 fun.y = mean) +       theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3,            legend.position = 'none') +       labs(#title = 'Histogram: Video Games Released by Year', #     subtitle = 'Worldwide Units Shipped (Not Including N/A)',           x = 'Franchise',           y = 'Global Units Shipped') +       scale_y_log10(breaks = c(.12, .24, .48, .96, 1.92, 3.84, 7.68, 							   15.36, 30.72, 61.44, 122.88)) bp4
Summary.Publisher = na.omit(vgdata) %>%                   group_by(Publisher) %>%                   summarise(NA.Sum = sum(NA_Sales),                             NA.Mean = mean(NA_Sales),                             NA.Median = median(NA_Sales),                             NA.Quant.90 = quantile(NA_Sales, probs = .9),                             NA.Quant.10 = quantile(NA_Sales, probs = .1),                             EU.Sum = sum(EU_Sales),                             EU.Mean = mean(EU_Sales),                             EU.Median = median(EU_Sales),                             EU.Quant.90 = quantile(EU_Sales, probs = .9),                             EU.Quant.10 = quantile(EU_Sales, probs = .1),                             JP.Sum = sum(JP_Sales),                             JP.Mean = mean(JP_Sales),                             JP.Median = median(JP_Sales),                             JP.Quant.90 = quantile(JP_Sales, probs = .9),                             JP.Quant.10 = quantile(JP_Sales, probs = .1),                             Other.Sum = sum(Other_Sales),                             Other.Mean = mean(Other_Sales),                             Other.Median = median(Other_Sales),                             Other.Quant.90 = quantile(Other_Sales, 													  probs = .9),                             Other.Quant.10 = quantile(Other_Sales, 													  probs = .1),                             Global.Sum = sum(Global_Sales),                             Global.Mean = mean(Global_Sales),                             Global.Median = median(Global_Sales),                             Global.Quant.90 = quantile(Global_Sales, 													   probs = .9),                             Global.Quant.10 = quantile(Global_Sales, 													   probs = .1),                             Count = n()) %>%               arrange(Global.Sum) #Publishers shipping more than 100 titles Summary.Publisher.Count <- Summary.Publisher %>%                            filter(Count > 100) #Publishers shipping more units than 95% of other publishers Summary.Publisher.Units <- Summary.Publisher %>%                             filter(Global.Sum > quantile(Global.Sum, 								   probs = .95)) head(Summary.Publisher.Count) #str(Summary.Publisher.Count) head(Summary.Publisher.Units) #str(Summary.Publisher.Units)
b7 = ggplot(Summary.Publisher.Units, aes(x = Publisher,                          y = Global.Sum,                          color = Publisher)) +       geom_bar(stat = 'identity',                width = 1,                aes(fill = Publisher),                    alpha = .4) +       theme(axis.text.x = element_text(angle = 90, hjust = 1),             aspect.ratio = 2 / 3,             legend.position = 'none') +       labs(x = 'Publisher',            y = 'Global Units Shipped (millions)') +       scale_y_sqrt(breaks = c(5, 50, round(seq(0, 2000, length.out = 15), digits = 0))) b7
Summary.Platform = na.omit(vgdata) %>%                   group_by(Platform) %>%                   summarise(NA.Sum = sum(NA_Sales),                             NA.Mean = mean(NA_Sales),                             NA.Median = median(NA_Sales),                             NA.Quant.90 = quantile(NA_Sales, probs = .9),                             NA.Quant.10 = quantile(NA_Sales, probs = .1),                             EU.Sum = sum(EU_Sales),                             EU.Mean = mean(EU_Sales),                             EU.Median = median(EU_Sales),                             EU.Quant.90 = quantile(EU_Sales, probs = .9),                             EU.Quant.10 = quantile(EU_Sales, probs = .1),                             JP.Sum = sum(JP_Sales),                             JP.Mean = mean(JP_Sales),                             JP.Median = median(JP_Sales),                             JP.Quant.90 = quantile(JP_Sales, probs = .9),                             JP.Quant.10 = quantile(JP_Sales, probs = .1),                             Other.Sum = sum(Other_Sales),                             Other.Mean = mean(Other_Sales),                             Other.Median = median(Other_Sales),                             Other.Quant.90 = quantile(Other_Sales, 													  probs = .9),                             Other.Quant.10 = quantile(Other_Sales, 													  probs = .1),                             Global.Sum = sum(Global_Sales),                             Global.Mean = mean(Global_Sales),                             Global.Median = median(Global_Sales),                             Global.Quant.90 = quantile(Global_Sales, 													   probs = .9),                             Global.Quant.10 = quantile(Global_Sales, 													   probs = .1),                             Count = n()) %>%               mutate(Percent = Count / sum(Count)) %>%               arrange(Platform) Summary.Platform
b8 = ggplot(Summary.Platform, aes(x = Platform,                          y = Global.Sum,                          color = Platform)) +       geom_bar(stat = 'identity',                width = 1,                aes(fill = Platform),                alpha = .4) +       theme(axis.text.x = element_text(angle = 90, hjust = 1),             aspect.ratio = 2 / 3,             legend.position = 'none') +       labs(x = 'Platform',            y = 'Global Units Shipped (millions)') +       scale_y_sqrt(breaks = c(5, 50, round(seq(0, 2000, length.out = 15), digits = 0))) b8
b10 = ggplot(Summary.Genre, aes(x = Genre,                          y = Global.Sum,                          color = Genre)) +       geom_bar(stat = 'identity',                width = 1,                aes(fill = Genre),                    alpha = .4) +       theme(axis.text.x = element_text(angle = 90, hjust = 1),             aspect.ratio = 2 / 3,             legend.position = 'none') +       labs(x = 'Genre',            y = 'Global Units Shipped (millions)') +       scale_y_sqrt(breaks = c(5, 50, round(seq(0, 2000, length.out = 15), digits = 0))) b10
Summary.Genre = na.omit(vgdata) %>%                   group_by(Genre) %>%                   summarise(NA.Sum = sum(NA_Sales),                             NA.Mean = mean(NA_Sales),                             NA.Median = median(NA_Sales),                             NA.Quant.90 = quantile(NA_Sales, probs = .9),                             NA.Quant.10 = quantile(NA_Sales, probs = .1),                             EU.Sum = sum(EU_Sales),                             EU.Mean = mean(EU_Sales),                             EU.Median = median(EU_Sales),                             EU.Quant.90 = quantile(EU_Sales, probs = .9),                             EU.Quant.10 = quantile(EU_Sales, probs = .1),                             JP.Sum = sum(JP_Sales),                             JP.Mean = mean(JP_Sales),                             JP.Median = median(JP_Sales),                             JP.Quant.90 = quantile(JP_Sales, probs = .9),                             JP.Quant.10 = quantile(JP_Sales, probs = .1),                             Other.Sum = sum(Other_Sales),                             Other.Mean = mean(Other_Sales),                             Other.Median = median(Other_Sales),                             Other.Quant.90 = quantile(Other_Sales, 													  probs = .9),                             Other.Quant.10 = quantile(Other_Sales, 													  probs = .1),                             Global.Sum = sum(Global_Sales),                             Global.Mean = mean(Global_Sales),                             Global.Median = median(Global_Sales),                             Global.Quant.90 = quantile(Global_Sales, 													   probs = .9),                             Global.Quant.10 = quantile(Global_Sales, 													   probs = .1),                             Count = n()) %>%               mutate(Percent = Count / sum(Count)) %>%               arrange(Genre) head(Summary.Genre)
b10 = ggplot(Summary.Genre, aes(x = Genre,                          y = Global.Sum,                          color = Genre)) +       geom_bar(stat = 'identity',                width = 1,                aes(fill = Genre),                    alpha = .4) +       theme(axis.text.x = element_text(angle = 90, hjust = 1),             aspect.ratio = 2 / 3,             legend.position = 'none') +       labs(x = 'Genre',            y = 'Global Units Shipped (millions)') +       scale_y_sqrt(breaks = c(5, 50, round(seq(0, 2000, length.out = 15), digits = 0))) b10
b9 = ggplot(Summary.Franchise, aes(x = Franchise,                          y = Global.Sum,                          color = Franchise)) +       geom_bar(stat = 'identity',                width = 1,                aes(fill = Franchise),                    alpha = .4) +       theme(axis.text.x = element_text(angle = 90, hjust = 1),             aspect.ratio = 2 / 3,             legend.position = 'none') +       labs(x = 'Franchise',            y = 'Global Units Shipped (millions)') +       scale_y_sqrt(breaks = c(5, 50, round(seq(0, 2000, length.out = 15), digits = 0))) b9
mario <- subset(vgdata, Franchise == 'Mario Brothers') mario
Top.Selling.Games <- subset(vgdata, Global.Units >= quantile(Global.Units, probs = .9)) Top.Selling.Games
#Top.Pubs <- data.frame(table(Top.Selling.Games$Publisher)) Top.Pubs <- data.frame(Top.Selling.Games$Publisher) colnames(Top.Pubs)[colnames(Top.Pubs) == 'Var1'] <- 'Publisher' Percent.Publisher <- prop.table(table(Top.Pubs)) Top.Pubs <- data.frame(Percent.Publisher) colnames(Top.Pubs)[colnames(Top.Pubs) == 'Freq'] <- 'Percent' Top.Pubs <- subset(Top.Pubs, Percent > 0) Top.Pubs <- arrange(Top.Pubs, desc(Percent)) head(Top.Pubs)
oldw <- getOption("warn") options(warn = -1) #summary(vgdata$Franchise) ap1 = ggplot(vgdata,              aes(x = Year,                  y = Global_Sales,                  color = Console_Company)) +       geom_density(stat = 'summary',                 aes(col = Console_Company),                 fun.y = mean) +       theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3) +       labs(#title = 'Histogram: Video Games Released by Year', #     subtitle = 'Worldwide Units Shipped (Not Including N/A)',           x = 'Console_Company',           y = 'Units Shipped') +       scale_y_sqrt(breaks = c(.12, .24, .48, .96, 1.92, 3.84)) ap1 options(warn = oldw)
oldw <- getOption("warn") options(warn = -1) melt.sales <- data.frame(NA.Units,                          EU.Units,                          JP.Units,                          Other.Units,                          Global.Units,                          as.factor(vgdata$Year),                          as.factor(vgdata$Franchise),                          as.factor(vgdata$Genre),                          as.factor(vgdata$Decade),                          as.factor(vgdata$Console_Company),                          as.factor(vgdata$Platform),                          id.vars = vgdata$Name) melt.sales <- melt(melt.sales) colnames(melt.sales)[colnames(melt.sales) ==  	'id.vars'] <- 'Name' colnames(melt.sales)[colnames(melt.sales) ==  	'variable'] <- 'Region' colnames(melt.sales)[colnames(melt.sales) ==  	'value'] <- 'Units' colnames(melt.sales)[colnames(melt.sales) ==  	'as.factor.vgdata.Year.'] <- 'Year' colnames(melt.sales)[colnames(melt.sales) ==  	'as.factor.vgdata.Franchise.'] <- 'YFranchiseear' colnames(melt.sales)[colnames(melt.sales) ==  	'as.factor.vgdata.Genre.'] <- 'Genre' colnames(melt.sales)[colnames(melt.sales) ==  	'as.factor.vgdata.Decade.'] <- 'Decade' colnames(melt.sales)[colnames(melt.sales) ==  	'as.factor.vgdata.Console_Company.'] <- 'Console_Company' colnames(melt.sales)[colnames(melt.sales) ==  	'as.factor.vgdata.Platform.'] <- 'Platform' melt.sales$Year <- as.numeric(as.character(melt.sales$Year)) melt.sales <- data.frame(melt.sales) total.sales <- melt.sales %>%                    group_by(Region, Year) %>%                    summarise(Total = sum(Units)) total.sales.year <- subset(total.sales, Region == 'Global.Units') %>%                         group_by(Year, Region) %>%                         summarise(Total.Units = sum(Total)) head(total.sales.year) tail(total.sales.year) options(warn = oldw)
oldw <- getOption("warn") options(warn = -1) ap2 = ggplot(subset(total.sales, Region != 'Global.Units'),              aes(x = Year,                  y = Total,                  col = Region,                  fill = Region,                  group = Region)) +       geom_density(stat = 'identity',                    alpha = .5,                    position = 'stack') +       theme_set(theme_minimal(10)) +       theme(axis.text.x = element_text(angle = 90, hjust = 1),            aspect.ratio = 2 / 3) +       scale_y_continuous() +       scale_x_continuous(breaks = seq(1980, 2016, by = 2)) ap2 options(warn = oldw)
oldw <- getOption("warn") options(warn = -1) melt.sales <- data.frame(NA.Units,                          EU.Units,                          JP.Units,                          Other.Units,                          Global.Units,                          as.factor(vgdata$Year),                          as.factor(vgdata$Franchise),                          as.factor(vgdata$Genre),                          as.factor(vgdata$Decade),                          as.factor(vgdata$Console_Company),                          as.factor(vgdata$Platform),                          id.vars = vgdata$Name) melt.sales <- melt(melt.sales) colnames(melt.sales)[colnames(melt.sales) ==  	'id.vars'] <- 'Name' colnames(melt.sales)[colnames(melt.sales) ==  	'variable'] <- 'Region' colnames(melt.sales)[colnames(melt.sales) ==  	'value'] <- 'Units' colnames(melt.sales)[colnames(melt.sales) ==  	'as.factor.vgdata.Year.'] <- 'Year' colnames(melt.sales)[colnames(melt.sales) ==  	'as.factor.vgdata.Franchise.'] <- 'YFranchiseear' colnames(melt.sales)[colnames(melt.sales) ==  	'as.factor.vgdata.Genre.'] <- 'Genre' colnames(melt.sales)[colnames(melt.sales) ==  	'as.factor.vgdata.Decade.'] <- 'Decade' colnames(melt.sales)[colnames(melt.sales) ==  	'as.factor.vgdata.Console_Company.'] <- 'Console_Company' colnames(melt.sales)[colnames(melt.sales) ==  	'as.factor.vgdata.Platform.'] <- 'Platform' melt.sales$Year <- as.numeric(as.character(melt.sales$Year)) melt.sales <- data.frame(melt.sales) total.sales <- melt.sales %>%                    group_by(Region, Year) %>%                    summarise(Total = sum(Units)) total.sales.year <- subset(total.sales, Region == 'Global.Units') %>%                         group_by(Year, Region) %>%                         summarise(Total.Units = sum(Total)) head(total.sales.year) tail(total.sales.year) options(warn = oldw)
Summary.Name = na.omit(vgdata) %>%                   group_by(Name, Year) %>%                   summarise(NA.Sum = sum(NA_Sales),                             EU.Sum = sum(EU_Sales),                             JP.Sum = sum(JP_Sales),                             Other.Sum = sum(Other_Sales),                             Global.Sum = sum(Global_Sales)) %>%                   arrange(desc(Year), desc(Global.Sum)) print('Top Games: 1985') head(filter(Summary.Name, Year == 1985)) print('Top Games: 1989') head(filter(Summary.Name, Year == 1989)) print('Top Games: 2008') head(filter(Summary.Name, Year == 2008)) print('Top Games: 2009') head(filter(Summary.Name, Year == 2009)) Summary.Franchise.Top = na.omit(vgdata) %>%                   group_by(Franchise, Year) %>%                   summarise(NA.Sum = sum(NA_Sales),                             EU.Sum = sum(EU_Sales),                             JP.Sum = sum(JP_Sales),                             Other.Sum = sum(Other_Sales),                             Global.Sum = sum(Global_Sales)) %>%                   arrange(desc(Year), desc(Global.Sum)) print('Top Franchise: 1985') head(filter(Summary.Franchise.Top, Year == 1985 & Franchise != 'Other')) print('Top Franchise: 1989') head(filter(Summary.Franchise.Top, Year == 1989 & Franchise != 'Other')) print('Top Franchise: 2008') head(filter(Summary.Franchise.Top, Year == 2008 & Franchise != 'Other')) print('Top Franchise: 2009') head(filter(Summary.Franchise.Top, Year == 2009 & Franchise != 'Other')) ```
oldw <- getOption("warn") options(warn = -1) melt.sales <- data.frame(NA.Units,                          EU.Units,                          JP.Units,                          Other.Units,                          Global.Units,                          as.factor(vgdata$Year),                          as.factor(vgdata$Franchise),                          as.factor(vgdata$Genre),                          as.factor(vgdata$Decade),                          as.factor(vgdata$Console_Company),                          as.factor(vgdata$Platform),                          id.vars = vgdata$Name) melt.sales <- melt(melt.sales) colnames(melt.sales)[colnames(melt.sales) ==  	'id.vars'] <- 'Name' colnames(melt.sales)[colnames(melt.sales) ==  	'variable'] <- 'Region' colnames(melt.sales)[colnames(melt.sales) ==  	'value'] <- 'Units' colnames(melt.sales)[colnames(melt.sales) ==  	'as.factor.vgdata.Year.'] <- 'Year' colnames(melt.sales)[colnames(melt.sales) ==  	'as.factor.vgdata.Franchise.'] <- 'YFranchiseear' colnames(melt.sales)[colnames(melt.sales) ==  	'as.factor.vgdata.Genre.'] <- 'Genre' colnames(melt.sales)[colnames(melt.sales) ==  	'as.factor.vgdata.Decade.'] <- 'Decade' colnames(melt.sales)[colnames(melt.sales) ==  	'as.factor.vgdata.Console_Company.'] <- 'Console_Company' colnames(melt.sales)[colnames(melt.sales) ==  	'as.factor.vgdata.Platform.'] <- 'Platform' melt.sales$Year <- as.numeric(as.character(melt.sales$Year)) melt.sales <- data.frame(melt.sales) total.sales <- melt.sales %>%                    group_by(Region, Year) %>%                    summarise(Total = sum(Units)) total.sales.year <- subset(total.sales, Region == 'Global.Units') %>%                         group_by(Year, Region) %>%                         summarise(Total.Units = sum(Total)) head(total.sales.year) tail(total.sales.year) options(warn = oldw)
Summary.Name = na.omit(vgdata) %>%                   group_by(Name, Year) %>%                   summarise(NA.Sum = sum(NA_Sales),                             EU.Sum = sum(EU_Sales),                             JP.Sum = sum(JP_Sales),                             Other.Sum = sum(Other_Sales),                             Global.Sum = sum(Global_Sales)) %>%                   arrange(desc(Year), desc(Global.Sum)) print('Top Games: 1985') head(filter(Summary.Name, Year == 1985)) print('Top Games: 1989') head(filter(Summary.Name, Year == 1989)) print('Top Games: 2008') head(filter(Summary.Name, Year == 2008)) print('Top Games: 2009') head(filter(Summary.Name, Year == 2009)) Summary.Franchise.Top = na.omit(vgdata) %>%                   group_by(Franchise, Year) %>%                   summarise(NA.Sum = sum(NA_Sales),                             EU.Sum = sum(EU_Sales),                             JP.Sum = sum(JP_Sales),                             Other.Sum = sum(Other_Sales),                             Global.Sum = sum(Global_Sales)) %>%                   arrange(desc(Year), desc(Global.Sum)) print('Top Franchise: 1985') head(filter(Summary.Franchise.Top, Year == 1985 & Franchise != 'Other')) print('Top Franchise: 1989') head(filter(Summary.Franchise.Top, Year == 1989 & Franchise != 'Other')) print('Top Franchise: 2008') head(filter(Summary.Franchise.Top, Year == 2008 & Franchise != 'Other')) print('Top Franchise: 2009') head(filter(Summary.Franchise.Top, Year == 2009 & Franchise != 'Other')) ```
oldw <- getOption("warn") options(warn = -1) Franchise.Sales <- data.frame(vgdata$Franchise, vgdata$Genre, 							  vgdata$Name, vgdata$Year, vgdata$Global_Sales) colnames(Franchise.Sales)[colnames(Franchise.Sales) ==  	'vgdata.Franchise'] <- 'Franchise' colnames(Franchise.Sales)[colnames(Franchise.Sales) ==  	'vgdata.Genre'] <- 'Genre' colnames(Franchise.Sales)[colnames(Franchise.Sales) ==  	'vgdata.Name'] <- 'Name' colnames(Franchise.Sales)[colnames(Franchise.Sales) ==  	'vgdata.Year'] <- 'Year' colnames(Franchise.Sales)[colnames(Franchise.Sales) ==  	'vgdata.Global_Sales'] <- 'Global.Sales' Franchise.Sales <- na.omit(Franchise.Sales) %>%         group_by(Franchise, Name, Year) %>%         summarise(Global.Sales = sum(Global.Sales)) %>%         arrange(Franchise, Year, Name) head(Franchise.Sales) tail(Franchise.Sales) ap3 = ggplot(subset(Franchise.Sales, Franchise != 'Other'),              aes(x = Year,                  y = Global.Sales,                  color = Name,                  fill = Name)) +       geom_point(stat = 'identity',                  aes(col = Franchise), #position = 'jitter',                  alpha = .5) +       stat_smooth(aes(y = Global.Sales, group = 1),                    fun.y = mean,                    color = "red",                    geom = "line",                    alpha = .6,                  ) +       theme_set(theme_minimal(7)) +       theme(axis.text.x = element_text(angle = 90,                                        hjust = 1,                                        vjust = .5),             aspect.ratio = 3 / 7,             legend.position = 'none') +       scale_y_log10() +       facet_wrap(~factor(Franchise),                  scales = 'free',                  ncol = 6) ap3 options(warn = oldw)
oldw <- getOption("warn") options(warn = -1) Franchise.Sales <- data.frame(vgdata$Franchise, vgdata$Genre, 							  vgdata$Name, vgdata$Year, vgdata$Global_Sales) colnames(Franchise.Sales)[colnames(Franchise.Sales) ==  	'vgdata.Franchise'] <- 'Franchise' colnames(Franchise.Sales)[colnames(Franchise.Sales) ==  	'vgdata.Genre'] <- 'Genre' colnames(Franchise.Sales)[colnames(Franchise.Sales) ==  	'vgdata.Name'] <- 'Name' colnames(Franchise.Sales)[colnames(Franchise.Sales) ==  	'vgdata.Year'] <- 'Year' colnames(Franchise.Sales)[colnames(Franchise.Sales) ==  	'vgdata.Global_Sales'] <- 'Global.Sales' Franchise.Sales <- na.omit(Franchise.Sales) %>%         group_by(Franchise, Name, Year) %>%         summarise(Global.Sales = sum(Global.Sales)) %>%         arrange(Franchise, Year, Name) head(Franchise.Sales) tail(Franchise.Sales) ap3 = ggplot(subset(Franchise.Sales, Franchise != 'Other'),              aes(x = Year,                  y = Global.Sales,                  color = Name,                  fill = Name)) +       geom_point(stat = 'identity',                  aes(col = Franchise), #position = 'jitter',                  alpha = .5) +       stat_smooth(aes(y = Global.Sales, group = 1),                    fun.y = mean,                    color = "red",                    geom = "line",                    alpha = .6,                  ) +       theme_set(theme_minimal(7)) +       theme(axis.text.x = element_text(angle = 90,                                        hjust = 1,                                        vjust = .5),             aspect.ratio = 3 / 7,             legend.position = 'none') +       scale_y_log10() +       facet_wrap(~factor(Franchise),                  scales = 'free',                  ncol = 2) ap3 options(warn = oldw)
oldw <- getOption("warn") options(warn = -1) Franchise.Sales <- data.frame(vgdata$Franchise, vgdata$Genre, 							  vgdata$Name, vgdata$Year, vgdata$Global_Sales) colnames(Franchise.Sales)[colnames(Franchise.Sales) ==  	'vgdata.Franchise'] <- 'Franchise' colnames(Franchise.Sales)[colnames(Franchise.Sales) ==  	'vgdata.Genre'] <- 'Genre' colnames(Franchise.Sales)[colnames(Franchise.Sales) ==  	'vgdata.Name'] <- 'Name' colnames(Franchise.Sales)[colnames(Franchise.Sales) ==  	'vgdata.Year'] <- 'Year' colnames(Franchise.Sales)[colnames(Franchise.Sales) ==  	'vgdata.Global_Sales'] <- 'Global.Sales' Franchise.Sales <- na.omit(Franchise.Sales) %>%         group_by(Franchise, Name, Year) %>%         summarise(Global.Sales = sum(Global.Sales)) %>%         arrange(Franchise, Year, Name) head(Franchise.Sales) tail(Franchise.Sales) ap3 = ggplot(subset(Franchise.Sales, Franchise != 'Other'),              aes(x = Year,                  y = Global.Sales,                  color = Name,                  fill = Name)) +       geom_point(stat = 'identity',                  aes(col = Franchise), #position = 'jitter',                  alpha = .5) +       stat_smooth(aes(y = Global.Sales, group = 1),                    fun.y = mean,                    color = "red",                    geom = "line",                    alpha = .6,                  ) +       theme_set(theme_minimal(7)) +       theme(axis.text.x = element_text(angle = 90,                                        hjust = 1,                                        vjust = .5),             aspect.ratio = 3 / 7,             legend.position = 'none') +       scale_y_log10() +       facet_wrap(~factor(Franchise),                  scales = 'free',                  ncol = 4) ap3 # This looks  options(warn = oldw)
oldw <- getOption("warn") options(warn = -1) Franchise.Sales <- data.frame(vgdata$Franchise, vgdata$Genre, 							  vgdata$Name, vgdata$Year, vgdata$Global_Sales) colnames(Franchise.Sales)[colnames(Franchise.Sales) ==  	'vgdata.Franchise'] <- 'Franchise' colnames(Franchise.Sales)[colnames(Franchise.Sales) ==  	'vgdata.Genre'] <- 'Genre' colnames(Franchise.Sales)[colnames(Franchise.Sales) ==  	'vgdata.Name'] <- 'Name' colnames(Franchise.Sales)[colnames(Franchise.Sales) ==  	'vgdata.Year'] <- 'Year' colnames(Franchise.Sales)[colnames(Franchise.Sales) ==  	'vgdata.Global_Sales'] <- 'Global.Sales' Franchise.Sales <- na.omit(Franchise.Sales) %>%         group_by(Franchise, Name, Year) %>%         summarise(Global.Sales = sum(Global.Sales)) %>%         arrange(Franchise, Year, Name) head(Franchise.Sales) tail(Franchise.Sales) ap3 = ggplot(subset(Franchise.Sales, Franchise != 'Other'),              aes(x = Year,                  y = Global.Sales,                  color = Name,                  fill = Name)) +       geom_point(stat = 'identity',                  aes(col = Franchise), #position = 'jitter',                  alpha = .5) +       stat_smooth(aes(y = Global.Sales, group = 1),                    fun.y = mean,                    color = "red",                    geom = "line",                    alpha = .6,                  ) +       theme_set(theme_minimal(7)) +       theme(axis.text.x = element_text(angle = 90,                                        hjust = 1,                                        vjust = .5),             aspect.ratio = 3 / 7,             legend.position = 'none') +       scale_y_log10() +       facet_wrap(~factor(Franchise),                  scales = 'free',                  ncol = 5) ap3 # This looks really weird in studio window, but looks fine in a browser... options(warn = oldw)
oldw <- getOption("warn") options(warn = -1) theme_set(theme_minimal(10)) Full.Year <- subset(vgdata, Year <= 2016) pp2 = ggplot(na.omit(Full.Year), aes(Year, NA_Sales)) +       geom_point(col = '#ff8e29',                  alpha = .07,                  position = 'jitter') +       geom_line(stat = 'summary', fun.y = mean) +       geom_line(stat = 'summary',                 fun.y = quantile,                 fun.args = list(probs = 0.1),                 linetype = 2,                 col = 'darkred') +       geom_line(stat = 'summary',                 fun.y = quantile,                 fun.args = list(probs = 0.9),                 linetype = 2,                 col = 'blue') +       theme(axis.text.x = element_text(angle = 90,                                        hjust = 1,                                        vjust = .5),            aspect.ratio = 2 / 3) +       labs(title = 'NA Region: Avg. Units Shipped',            subtitle = 'Yearly (Not Including N/A)',            x = 'Year',            y = 'NA Units Shipped') +       coord_trans(y = 'sqrt', limy = c(0, 11)) +       scale_x_continuous(breaks = seq(1980, 2016, by = 4)) +       scale_y_continuous(breaks = c(0, .25, 1, 3, 6, 11)) pp3 = ggplot(na.omit(Full.Year), aes(Year, EU_Sales)) +       geom_point(col = '#78c95f',                  alpha = .07,                  position = 'jitter') +       geom_line(stat = 'summary', fun.y = mean) +       geom_line(stat = 'summary',                 fun.y = quantile,                 fun.args = list(probs = 0.1),                 linetype = 2,                 col = 'darkred') +       geom_line(stat = 'summary',                 fun.y = quantile,                 fun.args = list(probs = 0.9),                 linetype = 2,                 col = 'blue') +       theme(axis.text.x = element_text(angle = 90,                                        hjust = 1,                                        vjust = .5),            aspect.ratio = 2 / 3) +       labs(title = 'EU Region: Avg. Units Shipped',            subtitle = 'Yearly (Not Including N/A)',            x = 'Year',            y = 'EU Units Shipped') +       coord_trans(y = 'sqrt', limy = c(0, 3)) +       scale_x_continuous(breaks = seq(1980, 2016, by = 4)) +       scale_y_continuous(breaks = c(0, .25, 1, 3)) pp4 = ggplot(na.omit(Full.Year), aes(Year, JP_Sales)) +       geom_point(col = '#267b8c',                  alpha = .07,                  position = 'jitter') +       geom_line(stat = 'summary', fun.y = mean) +       geom_line(stat = 'summary',                 fun.y = quantile,                 fun.args = list(probs = 0.1),                 linetype = 2,                 col = 'darkred') +       geom_line(stat = 'summary',                 fun.y = quantile,                 fun.args = list(probs = 0.9),                 linetype = 2,                 col = 'blue') +       theme(axis.text.x = element_text(angle = 90,                                        hjust = 1,                                        vjust = .5),            aspect.ratio = 2 / 3) +       labs(title = 'JP Region: Avg. Units Shipped',            subtitle = 'Yearly (Not Including N/A)',            x = 'Year',            y = 'JP Units Shipped') +       coord_trans(y = 'sqrt', limy = c(0, 6)) +       scale_x_continuous(breaks = seq(1980, 2016, by = 4)) +       scale_y_continuous(breaks = c(0, .25, 1, 3, 6)) pp5 = ggplot(na.omit(Full.Year), aes(Year, Other_Sales)) +       geom_point(col = '#854c85',                  alpha = .07,                  position = 'jitter') +       geom_line(stat = 'summary', fun.y = mean) +       geom_line(stat = 'summary',                 fun.y = quantile,                 fun.args = list(probs = 0.1),                 linetype = 2,                 col = 'darkred') +       geom_line(stat = 'summary',                 fun.y = quantile,                 fun.args = list(probs = 0.9),                 linetype = 2,                 col = 'blue') +       theme(axis.text.x = element_text(angle = 90,                                        hjust = 1,                                        vjust = .5),            aspect.ratio = 2 / 3) +       labs(title = 'Other Regions: Avg. Units Shipped',            subtitle = 'Yearly (Not Including N/A)',            x = 'Year',            y = 'Other Units Shipped') +       coord_trans(y = 'sqrt', limy = c(0, 3)) +       scale_x_continuous(breaks = seq(1980, 2016, by = 4)) +       scale_y_continuous(breaks = c(0, .25, 1, 3)) grid.arrange(pp2, pp3, pp4, pp5, ncol = 2) options(warn = oldw)
oldw <- getOption("warn") options(warn = -1) ap2 = ggplot(subset(total.sales, Region != 'Global.Units'),              aes(x = Year,                  y = Total,                  col = Region,                  fill = Region,                  group = Region)) +       geom_density(stat = 'identity',                    alpha = .5,                    position = 'stack') +       theme_set(theme_dark(10)) +       theme(axis.text.x = element_text(angle = 90,                                        hjust = 1,                                        vjust = .5),            aspect.ratio = 2 / 3) +       labs(title = 'Total Units Shipped By Region',            subtitle = 'Yearly (Not Including N/A)',            x = 'Year',            y = 'Units Shipped') +       coord_trans(limx = c(1980, 2016), limy = c(0, 700)) +       scale_y_continuous() +       scale_x_continuous(breaks = seq(1980, 2016, by = 2)) ap2 options(warn = oldw)
oldw <- getOption("warn") options(warn = -1) # install packages install.packages("knitr") install.packages("rmarkdown") install.packages('dplyr', repos = "http://cran.us.r-project.org") install.packages('ggplot2', repos = "http://cran.us.r-project.org") install.packages('corrplot', repos = "http://cran.us.r-project.org") install.packages('ggcorrplot', repos = "http://cran.us.r-project.org") install.packages('PerformanceAnalytics', repos = "http://cran.us.r-project.org") install.packages('GGally', repos = "http://cran.us.r-project.org") install.packages('ggthemes', dependencies = TRUE, repos = "http://cran.us.r-project.org") install.packages('Hmisc', repos = "http://cran.us.r-project.org") install.packages('plotly', repos = "http://cran.us.r-project.org") install.packages('gridExtra', repos = "http://cran.us.r-project.org") install.packages('reshape2', repos = "http://cran.us.r-project.org") install.packages('alr3', repos = "http://cran.us.r-project.org") install.packages('tidyr', repos = "http://cran.us.r-project.org") library(knitr) library(rmarkdown) library(ggplot2) library(corrplot) library(ggcorrplot) library(GGally) library(PerformanceAnalytics) library(ggthemes) library(Hmisc) library(plotly) library(dplyr) library(gridExtra) library(data.table) library(reshape2) library(alr3) library(tidyr) theme_set(theme_minimal(10)) options(warn = oldw)
devtools::install_github("rstudio/rmarkdown")
install_github("rstudio/rmarkdown")
rmarkdown::render('in.md',       output_format = pdf_document(latex_engine = 'xelatex')       )
rmarkdown::render('Report.rmd',       output_format = pdf_document(latex_engine = 'xelatex')       )
xvfb - run
oldw <- getOption("warn") options(warn = -1) # install packages install.packages("knitr") install.packages('xvfb-run') install.packages("rmarkdown") install.packages('dplyr', repos = "http://cran.us.r-project.org") install.packages('ggplot2', repos = "http://cran.us.r-project.org") install.packages('corrplot', repos = "http://cran.us.r-project.org") install.packages('ggcorrplot', repos = "http://cran.us.r-project.org") install.packages('PerformanceAnalytics', repos = "http://cran.us.r-project.org") install.packages('GGally', repos = "http://cran.us.r-project.org") install.packages('ggthemes', dependencies = TRUE, repos = "http://cran.us.r-project.org") install.packages('Hmisc', repos = "http://cran.us.r-project.org") install.packages('plotly', repos = "http://cran.us.r-project.org") install.packages('gridExtra', repos = "http://cran.us.r-project.org") install.packages('reshape2', repos = "http://cran.us.r-project.org") install.packages('alr3', repos = "http://cran.us.r-project.org") install.packages('tidyr', repos = "http://cran.us.r-project.org") library(xvfb - run) library(knitr) library(rmarkdown) library(ggplot2) library(corrplot) library(ggcorrplot) library(GGally) library(PerformanceAnalytics) library(ggthemes) library(Hmisc) library(plotly) library(dplyr) library(gridExtra) library(data.table) library(reshape2) library(alr3) library(tidyr) theme_set(theme_minimal(10)) options(warn = oldw)
options(bitmapType = 'cairo') png("xzvf.png") plot(z ~ x) dev.off()
png("test.png", width = 50000, height = 50000, res = 1000)
